<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Source;

/**
 * Represents a citation field -- its name and value.
 */
class CitationField
{

    /**
     * The citation field's name.
     *
     * @var string
     */
    private $name;

    /**
     * The citation field's value.
     *
     * @var string
     */
    private $value;

    /**
     * Constructs a CitationField from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The citation field's name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The citation field's name.
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * The citation field's value.
     *
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * The citation field's value.
     *
     * @param string $value
     */
    public function setValue($value)
    {
        $this->value = $value;
    }
    /**
     * Returns the associative array for this CitationField
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->value) {
            $a["value"] = $this->value;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this CitationField
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this CitationField from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['value'])) {
            $this->value = $o["value"];
        }
    }

    /**
     * Initializes this CitationField from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $this->value = '';
            while ($xml->read() && $xml->hasValue) {
                $this->value = $this->value . $xml->value;
            }
        }
    }


    /**
     * Sets a known child element of CitationField from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of CitationField from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (($xml->localName == 'name') && (empty($xml->namespaceURI))) {
            $this->name = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this CitationField to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->name) {
            $writer->writeAttribute('name', $this->name);
        }
        if ($this->value) {
            $writer->text($this->value);
        }
    }
}
