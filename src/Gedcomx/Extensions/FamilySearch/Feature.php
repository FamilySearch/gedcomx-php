<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch;

/**
 * A description of a FamilySearch feature.
 */
class Feature
{

    /**
     * The name of the feature.
     *
     * @var string
     */
    private $name;

    /**
     * A description of the feature.
     *
     * @var string
     */
    private $description;

    /**
     * Whether the feature is enabled for the current request.
     *
     * @var boolean
     */
    private $enabled;

    /**
     * The date that this feature is scheduled to activate permanently.
     *
     * @var integer
     */
    private $activationDate;

    /**
     * Constructs a Feature from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The name of the feature.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The name of the feature.
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * A description of the feature.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * A description of the feature.
     *
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    /**
     * Whether the feature is enabled for the current request.
     *
     * @return boolean
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Whether the feature is enabled for the current request.
     *
     * @param boolean $enabled
     */
    public function setEnabled($enabled)
    {
        $this->enabled = $enabled;
    }
    /**
     * The date that this feature is scheduled to activate permanently.
     *
     * @return integer
     */
    public function getActivationDate()
    {
        return $this->activationDate;
    }

    /**
     * The date that this feature is scheduled to activate permanently.
     *
     * @param integer $activationDate
     */
    public function setActivationDate($activationDate)
    {
        $this->activationDate = $activationDate;
    }
    /**
     * Returns the associative array for this Feature
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->description) {
            $a["description"] = $this->description;
        }
        if ($this->enabled) {
            $a["enabled"] = $this->enabled;
        }
        if ($this->activationDate) {
            $a["activationDate"] = $this->activationDate;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this Feature
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this Feature from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['description'])) {
            $this->description = $o["description"];
        }
        if (isset($o['enabled'])) {
            $this->enabled = $o["enabled"];
        }
        if (isset($o['activationDate'])) {
            $this->activationDate = $o["activationDate"];
        }
    }

    /**
     * Initializes this Feature from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of Feature from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'name') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->name = $child;
            $happened = true;
        }
        else if (($xml->localName == 'description') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->description = $child;
            $happened = true;
        }
        else if (($xml->localName == 'enabled') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->enabled = $child;
            $happened = true;
        }
        else if (($xml->localName == 'activationDate') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->activationDate = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Feature from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes the contents of this Feature to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->name) {
            $writer->startElementNs('fs', 'name', null);
            $writer->text($this->name);
            $writer->endElement();
        }
        if ($this->description) {
            $writer->startElementNs('fs', 'description', null);
            $writer->text($this->description);
            $writer->endElement();
        }
        if ($this->enabled) {
            $writer->startElementNs('fs', 'enabled', null);
            $writer->text($this->enabled);
            $writer->endElement();
        }
        if ($this->activationDate) {
            $writer->startElementNs('fs', 'activationDate', null);
            $writer->text($this->activationDate);
            $writer->endElement();
        }
    }
}
