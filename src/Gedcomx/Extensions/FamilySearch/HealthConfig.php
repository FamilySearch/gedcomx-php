<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch;

/**
 * 
 */
class HealthConfig
{

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $buildDate;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $buildVersion;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $databaseVersion;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $platformVersion;

    /**
     * Constructs a HealthConfig from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getBuildDate()
    {
        return $this->buildDate;
    }

    /**
     * (no documentation provided)
     *
     * @param string $buildDate
     */
    public function setBuildDate($buildDate)
    {
        $this->buildDate = $buildDate;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getBuildVersion()
    {
        return $this->buildVersion;
    }

    /**
     * (no documentation provided)
     *
     * @param string $buildVersion
     */
    public function setBuildVersion($buildVersion)
    {
        $this->buildVersion = $buildVersion;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDatabaseVersion()
    {
        return $this->databaseVersion;
    }

    /**
     * (no documentation provided)
     *
     * @param string $databaseVersion
     */
    public function setDatabaseVersion($databaseVersion)
    {
        $this->databaseVersion = $databaseVersion;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPlatformVersion()
    {
        return $this->platformVersion;
    }

    /**
     * (no documentation provided)
     *
     * @param string $platformVersion
     */
    public function setPlatformVersion($platformVersion)
    {
        $this->platformVersion = $platformVersion;
    }
    /**
     * Returns the associative array for this HealthConfig
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->buildDate) {
            $a["buildDate"] = $this->buildDate;
        }
        if ($this->buildVersion) {
            $a["buildVersion"] = $this->buildVersion;
        }
        if ($this->databaseVersion) {
            $a["databaseVersion"] = $this->databaseVersion;
        }
        if ($this->platformVersion) {
            $a["platformVersion"] = $this->platformVersion;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this HealthConfig
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this HealthConfig from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['buildDate'])) {
            $this->buildDate = $o["buildDate"];
        }
        if (isset($o['buildVersion'])) {
            $this->buildVersion = $o["buildVersion"];
        }
        if (isset($o['databaseVersion'])) {
            $this->databaseVersion = $o["databaseVersion"];
        }
        if (isset($o['platformVersion'])) {
            $this->platformVersion = $o["platformVersion"];
        }
    }

    /**
     * Initializes this HealthConfig from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of HealthConfig from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'buildDate') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->buildDate = $child;
            $happened = true;
        }
        else if (($xml->localName == 'buildVersion') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->buildVersion = $child;
            $happened = true;
        }
        else if (($xml->localName == 'databaseVersion') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->databaseVersion = $child;
            $happened = true;
        }
        else if (($xml->localName == 'platformVersion') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->platformVersion = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of HealthConfig from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {

        return false;
    }

    /**
     * Writes this HealthConfig to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('fs', 'healthConfig', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'fs', null, 'http://familysearch.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this HealthConfig to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->buildDate) {
            $writer->startElementNs('fs', 'buildDate', null);
            $writer->text($this->buildDate);
            $writer->endElement();
        }
        if ($this->buildVersion) {
            $writer->startElementNs('fs', 'buildVersion', null);
            $writer->text($this->buildVersion);
            $writer->endElement();
        }
        if ($this->databaseVersion) {
            $writer->startElementNs('fs', 'databaseVersion', null);
            $writer->text($this->databaseVersion);
            $writer->endElement();
        }
        if ($this->platformVersion) {
            $writer->startElementNs('fs', 'platformVersion', null);
            $writer->text($this->platformVersion);
            $writer->endElement();
        }
    }
}
