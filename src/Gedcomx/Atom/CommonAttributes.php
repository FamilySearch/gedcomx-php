<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Atom;

/**
 * 
 */
class CommonAttributes
{

    /**
     * The base.
     *
     * @var string
     */
    private $base;

    /**
     * The language.
     *
     * @var string
     */
    private $lang;

    /**
     * Constructs a CommonAttributes from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The base.
     *
     * @return string
     */
    public function getBase()
    {
        return $this->base;
    }

    /**
     * The base.
     *
     * @param string $base
     */
    public function setBase($base)
    {
        $this->base = $base;
    }
    /**
     * The language.
     *
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }

    /**
     * The language.
     *
     * @param string $lang
     */
    public function setLang($lang)
    {
        $this->lang = $lang;
    }
    /**
     * Returns the associative array for this CommonAttributes
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->base) {
            $a["base"] = $this->base;
        }
        if ($this->lang) {
            $a["lang"] = $this->lang;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this CommonAttributes
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this CommonAttributes from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['base'])) {
            $this->base = $o["base"];
        }
        if (isset($o['lang'])) {
            $this->lang = $o["lang"];
        }
    }

    /**
     * Initializes this CommonAttributes from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of CommonAttributes from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of CommonAttributes from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (($xml->localName == 'base') && (empty($xml->namespaceURI))) {
            $this->base = $xml->value;
            return true;
        }
        if (($xml->localName == 'lang') && ($xml->namespaceURI == 'http://www.w3.org/XML/1998/namespace')) {
            $this->lang = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this CommonAttributes to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->base) {
            $writer->writeAttribute('base', $this->base);
        }
        if ($this->lang) {
            $writer->writeAttribute('xml:lang', $this->lang);
        }
    }
}
