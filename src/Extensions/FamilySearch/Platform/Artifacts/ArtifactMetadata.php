<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Platform\Artifacts;

/**
 * Class ArtifactMetadata
 *
 * @package Gedcomx\Extensions\FamilySearch\Platform\Artifacts
 *
 *          FamilySearch-specific metadata about an artifact.
 */
class ArtifactMetadata
{
    /**
     * The type of the gender.
     *
     * @var string
     */
    private $artifactType;

    /**
     * The original filename of the memories item.
     *
     * @var string
     */
    private $filename;

    /**
     * The height of the artifact (presumably an image).
     *
     * @var integer
     */
    private $height;

    /**
     * The width of the artifact (presumably an image).
     *
     * @var integer
     */
    private $width;

    /**
     * Constructs a ArtifactMetadata from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The type of the gender.
     *
     * @return string
     */
    public function getArtifactType()
    {
        return $this->artifactType;
    }

    /**
     * The type of the gender.
     *
     * @param string $artifactType
     */
    public function setArtifactType($artifactType)
    {
        $this->artifactType = $artifactType;
    }
    /**
     * The original filename of the memories item.
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * The original filename of the memories item.
     *
     * @param string $filename
     */
    public function setFilename($filename)
    {
        $this->filename = $filename;
    }
    /**
     * The height of the artifact (presumably an image).
     *
     * @return integer
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * The height of the artifact (presumably an image).
     *
     * @param integer $height
     */
    public function setHeight($height)
    {
        $this->height = $height;
    }
    /**
     * The width of the artifact (presumably an image).
     *
     * @return integer
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * The width of the artifact (presumably an image).
     *
     * @param integer $width
     */
    public function setWidth($width)
    {
        $this->width = $width;
    }
    /**
     * Returns the associative array for this ArtifactMetadata
     *
     * @return array
     */
    public function toArray()
    {
        $a = array();
        if ($this->artifactType) {
            $a["artifactType"] = $this->artifactType;
        }
        if ($this->filename) {
            $a["filename"] = $this->filename;
        }
        if ($this->height) {
            $a["height"] = $this->height;
        }
        if ($this->width) {
            $a["width"] = $this->width;
        }
        return $a;
    }

    /**
     * Returns the JSON string for this ArtifactMetadata
     *
     * @return string
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Initializes this ArtifactMetadata from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['artifactType'])) {
            $this->artifactType = $o["artifactType"];
        }
        if (isset($o['filename'])) {
            $this->filename = $o["filename"];
        }
        if (isset($o['height'])) {
            $this->height = $o["height"];
        }
        if (isset($o['width'])) {
            $this->width = $o["width"];
        }
    }

    /**
     * Initializes this ArtifactMetadata from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
                    //skip unknown attributes...
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$this->setKnownChildElement($xml)) {
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
                    //skip the unknown element
                    while ($xml->nodeType != \XMLReader::END_ELEMENT && $xml->localName != $n && $xml->namespaceURI != $ns) {
                        $xml->read();
                    }
                }
                $xml->read(); //advance the reader.
            }
        }
    }


    /**
     * Sets a known child element of ArtifactMetadata from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = false;
        if (($xml->localName == 'filename') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->filename = $child;
            $happened = true;
        }
        else if (($xml->localName == 'height') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->height = $child;
            $happened = true;
        }
        else if (($xml->localName == 'width') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->width = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of ArtifactMetadata from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (($xml->localName == 'artifactType') && (empty($xml->namespaceURI))) {
            $this->artifactType = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes this ArtifactMetadata to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     *
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('fs', 'artifactMetadata', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'fs', null, 'http://familysearch.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this ArtifactMetadata to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->artifactType) {
            $writer->writeAttribute('artifactType', $this->artifactType);
        }
        if ($this->filename) {
            $writer->startElementNs('fs', 'filename', null);
            $writer->text($this->filename);
            $writer->endElement();
        }
        if ($this->height) {
            $writer->startElementNs('fs', 'height', null);
            $writer->text($this->height);
            $writer->endElement();
        }
        if ($this->width) {
            $writer->startElementNs('fs', 'width', null);
            $writer->text($this->width);
            $writer->endElement();
        }
    }
}
