<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Platform\Users;

use Gedcomx\Extensions\FamilySearch\Rt\FamilySearchPlatformModelVisitor;
use Gedcomx\Links\HypermediaEnabledData;

/**
 * Family Tree User Service User
 */
class User extends HypermediaEnabledData
{
    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $alternateEmail;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $birthDate;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $contactName;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $country;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $displayName;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $email;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $familyName;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $fullName;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $gender;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $givenName;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $helperAccessPin;

    /**
     * (no documentation provided)
     *
     * @var boolean
     */
    private $ldsMemberAccount;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $mailingAddress;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $personId;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $phoneNumber;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $preferredLanguage;

    /**
     * (no documentation provided)
     *
     * @var string
     */
    private $treeUserId;

    /**
     * Constructs a User from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getAlternateEmail()
    {
        return $this->alternateEmail;
    }

    /**
     * (no documentation provided)
     *
     * @param string $alternateEmail
     */
    public function setAlternateEmail($alternateEmail)
    {
        $this->alternateEmail = $alternateEmail;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->birthDate;
    }

    /**
     * (no documentation provided)
     *
     * @param string $birthDate
     */
    public function setBirthDate($birthDate)
    {
        $this->birthDate = $birthDate;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->contactName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $contactName
     */
    public function setContactName($contactName)
    {
        $this->contactName = $contactName;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * (no documentation provided)
     *
     * @param string $country
     */
    public function setCountry($country)
    {
        $this->country = $country;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->displayName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $displayName
     */
    public function setDisplayName($displayName)
    {
        $this->displayName = $displayName;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * (no documentation provided)
     *
     * @param string $email
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getFamilyName()
    {
        return $this->familyName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $familyName
     */
    public function setFamilyName($familyName)
    {
        $this->familyName = $familyName;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->fullName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $fullName
     */
    public function setFullName($fullName)
    {
        $this->fullName = $fullName;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * (no documentation provided)
     *
     * @param string $gender
     */
    public function setGender($gender)
    {
        $this->gender = $gender;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getGivenName()
    {
        return $this->givenName;
    }

    /**
     * (no documentation provided)
     *
     * @param string $givenName
     */
    public function setGivenName($givenName)
    {
        $this->givenName = $givenName;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getHelperAccessPin()
    {
        return $this->helperAccessPin;
    }

    /**
     * (no documentation provided)
     *
     * @param string $helperAccessPin
     */
    public function setHelperAccessPin($helperAccessPin)
    {
        $this->helperAccessPin = $helperAccessPin;
    }
    /**
     * (no documentation provided)
     *
     * @return boolean
     */
    public function getLdsMemberAccount()
    {
        return $this->ldsMemberAccount;
    }

    /**
     * (no documentation provided)
     *
     * @param boolean $ldsMemberAccount
     */
    public function setLdsMemberAccount($ldsMemberAccount)
    {
        $this->ldsMemberAccount = $ldsMemberAccount;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getMailingAddress()
    {
        return $this->mailingAddress;
    }

    /**
     * (no documentation provided)
     *
     * @param string $mailingAddress
     */
    public function setMailingAddress($mailingAddress)
    {
        $this->mailingAddress = $mailingAddress;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPersonId()
    {
        return $this->personId;
    }

    /**
     * (no documentation provided)
     *
     * @param string $personId
     */
    public function setPersonId($personId)
    {
        $this->personId = $personId;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phoneNumber;
    }

    /**
     * (no documentation provided)
     *
     * @param string $phoneNumber
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->phoneNumber = $phoneNumber;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getPreferredLanguage()
    {
        return $this->preferredLanguage;
    }

    /**
     * (no documentation provided)
     *
     * @param string $preferredLanguage
     */
    public function setPreferredLanguage($preferredLanguage)
    {
        $this->preferredLanguage = $preferredLanguage;
    }
    /**
     * (no documentation provided)
     *
     * @return string
     */
    public function getTreeUserId()
    {
        return $this->treeUserId;
    }

    /**
     * (no documentation provided)
     *
     * @param string $treeUserId
     */
    public function setTreeUserId($treeUserId)
    {
        $this->treeUserId = $treeUserId;
    }
    /**
     * Returns the associative array for this User
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->alternateEmail) {
            $a["alternateEmail"] = $this->alternateEmail;
        }
        if ($this->birthDate) {
            $a["birthDate"] = $this->birthDate;
        }
        if ($this->contactName) {
            $a["contactName"] = $this->contactName;
        }
        if ($this->country) {
            $a["country"] = $this->country;
        }
        if ($this->displayName) {
            $a["displayName"] = $this->displayName;
        }
        if ($this->email) {
            $a["email"] = $this->email;
        }
        if ($this->familyName) {
            $a["familyName"] = $this->familyName;
        }
        if ($this->fullName) {
            $a["fullName"] = $this->fullName;
        }
        if ($this->gender) {
            $a["gender"] = $this->gender;
        }
        if ($this->givenName) {
            $a["givenName"] = $this->givenName;
        }
        if ($this->helperAccessPin) {
            $a["helperAccessPin"] = $this->helperAccessPin;
        }
        if ($this->ldsMemberAccount) {
            $a["ldsMemberAccount"] = $this->ldsMemberAccount;
        }
        if ($this->mailingAddress) {
            $a["mailingAddress"] = $this->mailingAddress;
        }
        if ($this->personId) {
            $a["personId"] = $this->personId;
        }
        if ($this->phoneNumber) {
            $a["phoneNumber"] = $this->phoneNumber;
        }
        if ($this->preferredLanguage) {
            $a["preferredLanguage"] = $this->preferredLanguage;
        }
        if ($this->treeUserId) {
            $a["treeUserId"] = $this->treeUserId;
        }
        return $a;
    }


    /**
     * Initializes this User from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['alternateEmail'])) {
            $this->alternateEmail = $o["alternateEmail"];
            unset($o['alternateEmail']);
        }
        if (isset($o['birthDate'])) {
            $this->birthDate = $o["birthDate"];
            unset($o['birthDate']);
        }
        if (isset($o['contactName'])) {
            $this->contactName = $o["contactName"];
            unset($o['contactName']);
        }
        if (isset($o['country'])) {
            $this->country = $o["country"];
            unset($o['country']);
        }
        if (isset($o['displayName'])) {
            $this->displayName = $o["displayName"];
            unset($o['displayName']);
        }
        if (isset($o['email'])) {
            $this->email = $o["email"];
            unset($o['email']);
        }
        if (isset($o['familyName'])) {
            $this->familyName = $o["familyName"];
            unset($o['familyName']);
        }
        if (isset($o['fullName'])) {
            $this->fullName = $o["fullName"];
            unset($o['fullName']);
        }
        if (isset($o['gender'])) {
            $this->gender = $o["gender"];
            unset($o['gender']);
        }
        if (isset($o['givenName'])) {
            $this->givenName = $o["givenName"];
            unset($o['givenName']);
        }
        if (isset($o['helperAccessPin'])) {
            $this->helperAccessPin = $o["helperAccessPin"];
            unset($o['helperAccessPin']);
        }
        if (isset($o['ldsMemberAccount'])) {
            $this->ldsMemberAccount = $o["ldsMemberAccount"];
            unset($o['ldsMemberAccount']);
        }
        if (isset($o['mailingAddress'])) {
            $this->mailingAddress = $o["mailingAddress"];
            unset($o['mailingAddress']);
        }
        if (isset($o['personId'])) {
            $this->personId = $o["personId"];
            unset($o['personId']);
        }
        if (isset($o['phoneNumber'])) {
            $this->phoneNumber = $o["phoneNumber"];
            unset($o['phoneNumber']);
        }
        if (isset($o['preferredLanguage'])) {
            $this->preferredLanguage = $o["preferredLanguage"];
            unset($o['preferredLanguage']);
        }
        if (isset($o['treeUserId'])) {
            $this->treeUserId = $o["treeUserId"];
            unset($o['treeUserId']);
        }
        parent::initFromArray($o);
    }

    public function accept(FamilySearchPlatformModelVisitor $visitor)
    {
        $visitor->visitUser($this);
    }

    /**
     * Sets a known child element of User from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'alternateEmail') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->alternateEmail = $child;
            $happened = true;
        }
        else if (($xml->localName == 'birthDate') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->birthDate = $child;
            $happened = true;
        }
        else if (($xml->localName == 'contactName') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->contactName = $child;
            $happened = true;
        }
        else if (($xml->localName == 'country') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->country = $child;
            $happened = true;
        }
        else if (($xml->localName == 'displayName') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->displayName = $child;
            $happened = true;
        }
        else if (($xml->localName == 'email') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->email = $child;
            $happened = true;
        }
        else if (($xml->localName == 'familyName') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->familyName = $child;
            $happened = true;
        }
        else if (($xml->localName == 'fullName') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->fullName = $child;
            $happened = true;
        }
        else if (($xml->localName == 'gender') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->gender = $child;
            $happened = true;
        }
        else if (($xml->localName == 'givenName') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->givenName = $child;
            $happened = true;
        }
        else if (($xml->localName == 'helperAccessPin') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->helperAccessPin = $child;
            $happened = true;
        }
        else if (($xml->localName == 'ldsMemberAccount') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->ldsMemberAccount = $child;
            $happened = true;
        }
        else if (($xml->localName == 'mailingAddress') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->mailingAddress = $child;
            $happened = true;
        }
        else if (($xml->localName == 'personId') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->personId = $child;
            $happened = true;
        }
        else if (($xml->localName == 'phoneNumber') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->phoneNumber = $child;
            $happened = true;
        }
        else if (($xml->localName == 'preferredLanguage') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->preferredLanguage = $child;
            $happened = true;
        }
        else if (($xml->localName == 'treeUserId') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->treeUserId = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of User from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this User to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('fs', 'user', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
            $writer->writeAttributeNs('xmlns', 'fs', null, 'http://familysearch.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this User to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->alternateEmail) {
            $writer->startElementNs('fs', 'alternateEmail', null);
            $writer->text($this->alternateEmail);
            $writer->endElement();
        }
        if ($this->birthDate) {
            $writer->startElementNs('fs', 'birthDate', null);
            $writer->text($this->birthDate);
            $writer->endElement();
        }
        if ($this->contactName) {
            $writer->startElementNs('fs', 'contactName', null);
            $writer->text($this->contactName);
            $writer->endElement();
        }
        if ($this->country) {
            $writer->startElementNs('fs', 'country', null);
            $writer->text($this->country);
            $writer->endElement();
        }
        if ($this->displayName) {
            $writer->startElementNs('fs', 'displayName', null);
            $writer->text($this->displayName);
            $writer->endElement();
        }
        if ($this->email) {
            $writer->startElementNs('fs', 'email', null);
            $writer->text($this->email);
            $writer->endElement();
        }
        if ($this->familyName) {
            $writer->startElementNs('fs', 'familyName', null);
            $writer->text($this->familyName);
            $writer->endElement();
        }
        if ($this->fullName) {
            $writer->startElementNs('fs', 'fullName', null);
            $writer->text($this->fullName);
            $writer->endElement();
        }
        if ($this->gender) {
            $writer->startElementNs('fs', 'gender', null);
            $writer->text($this->gender);
            $writer->endElement();
        }
        if ($this->givenName) {
            $writer->startElementNs('fs', 'givenName', null);
            $writer->text($this->givenName);
            $writer->endElement();
        }
        if ($this->helperAccessPin) {
            $writer->startElementNs('fs', 'helperAccessPin', null);
            $writer->text($this->helperAccessPin);
            $writer->endElement();
        }
        if ($this->ldsMemberAccount) {
            $writer->startElementNs('fs', 'ldsMemberAccount', null);
            $writer->text($this->ldsMemberAccount);
            $writer->endElement();
        }
        if ($this->mailingAddress) {
            $writer->startElementNs('fs', 'mailingAddress', null);
            $writer->text($this->mailingAddress);
            $writer->endElement();
        }
        if ($this->personId) {
            $writer->startElementNs('fs', 'personId', null);
            $writer->text($this->personId);
            $writer->endElement();
        }
        if ($this->phoneNumber) {
            $writer->startElementNs('fs', 'phoneNumber', null);
            $writer->text($this->phoneNumber);
            $writer->endElement();
        }
        if ($this->preferredLanguage) {
            $writer->startElementNs('fs', 'preferredLanguage', null);
            $writer->text($this->preferredLanguage);
            $writer->endElement();
        }
        if ($this->treeUserId) {
            $writer->startElementNs('fs', 'treeUserId', null);
            $writer->text($this->treeUserId);
            $writer->endElement();
        }
    }
}
