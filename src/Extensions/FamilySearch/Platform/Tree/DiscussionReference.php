<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Platform\Tree;

use Gedcomx\Common\Attribution;
use Gedcomx\Links\HypermediaEnabledData;

/**
 * 
 */
class DiscussionReference extends HypermediaEnabledData
{
    const JSON_IDENTIFIER = 'discussion-references';
    /**
     * The id of the discussion being referenced.
     *
     * @var string
     */
    private $resourceId;

    /**
     * The URI to the resource.
     *
     * @var string
     */
    private $resource;

    /**
     * The attribution metadata for this discussion reference.
     *
     * @var \Gedcomx\Common\Attribution
     */
    private $attribution;

    /**
     * Constructs a DiscussionReference from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The id of the discussion being referenced.
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->resourceId;
    }

    /**
     * The id of the discussion being referenced.
     *
     * @param string $resourceId
     */
    public function setResourceId($resourceId)
    {
        $this->resourceId = $resourceId;
    }
    /**
     * The URI to the resource.
     *
     * @return string
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * The URI to the resource.
     *
     * @param string $resource
     */
    public function setResource($resource)
    {
        $this->resource = $resource;
    }
    /**
     * The attribution metadata for this discussion reference.
     *
     * @return \Gedcomx\Common\Attribution
     */
    public function getAttribution()
    {
        return $this->attribution;
    }

    /**
     * The attribution metadata for this discussion reference.
     *
     * @param \Gedcomx\Common\Attribution $attribution
     */
    public function setAttribution($attribution)
    {
        $this->attribution = $attribution;
    }
    /**
     * Returns the associative array for this DiscussionReference
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->resourceId) {
            $a["resourceId"] = $this->resourceId;
        }
        if ($this->resource) {
            $a["resource"] = $this->resource;
        }
        if ($this->attribution) {
            $a["attribution"] = $this->attribution->toArray();
        }
        return $a;
    }


    /**
     * Initializes this DiscussionReference from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['resourceId'])) {
            $this->resourceId = $o["resourceId"];
        }
        if (isset($o['resource'])) {
            $this->resource = $o["resource"];
        }
        if (isset($o['attribution'])) {
            $this->attribution = $o['attribution'] instanceof Attribution ? $o['attribution'] : new Attribution($o["attribution"]);
        }
    }

    /**
     * Sets a known child element of DiscussionReference from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'attribution') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = new \Gedcomx\Common\Attribution($xml);
            $this->attribution = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of DiscussionReference from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
        else if (($xml->localName == 'resourceId') && (empty($xml->namespaceURI))) {
            $this->resourceId = $xml->value;
            return true;
        }
        else if (($xml->localName == 'resource') && (empty($xml->namespaceURI))) {
            $this->resource = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes this DiscussionReference to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('fs', 'discussion-reference', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
            $writer->writeAttributeNs('xmlns', 'fs', null, 'http://familysearch.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this DiscussionReference to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->resourceId) {
            $writer->writeAttribute('resourceId', $this->resourceId);
        }
        if ($this->resource) {
            $writer->writeAttribute('resource', $this->resource);
        }
        parent::writeXmlContents($writer);
        if ($this->attribution) {
            $writer->startElementNs('fs', 'attribution', null);
            $this->attribution->writeXmlContents($writer);
            $writer->endElement();
        }
    }
}
