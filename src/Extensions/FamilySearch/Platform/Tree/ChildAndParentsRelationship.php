<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Extensions\FamilySearch\Platform\Tree;

use Gedcomx\Common\ResourceReference;
use Gedcomx\Conclusion\Fact;
use Gedcomx\Conclusion\Subject;

/**
 * The FamilySearch-proprietary model for a relationship between a child and a pair of parents.
 */
class ChildAndParentsRelationship extends Subject
{
    const JSON_IDENTIFIER = 'child-and-parents-relationships';
    /**
     * The father of the child.
     *
     * @var ResourceReference
     */
    private $father;

    /**
     * The mother of the child.
     *
     * @var ResourceReference
     */
    private $mother;

    /**
     * child in the relationship.
     *
     * @var ResourceReference
     */
    private $child;

    /**
     * The fact conclusions for the father.
     *
     * @var Fact[]
     */
    private $fatherFacts;

    /**
     * The fact conclusions for the mother.
     *
     * @var Fact[]
     */
    private $motherFacts;

    /**
     * Constructs a ChildAndParentsRelationship from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The father of the child.
     *
     * @return ResourceReference
     */
    public function getFather()
    {
        return $this->father;
    }

    /**
     * The father of the child.
     *
     * @param ResourceReference $father
     */
    public function setFather($father)
    {
        $this->father = $father;
    }
    /**
     * The mother of the child.
     *
     * @return ResourceReference
     */
    public function getMother()
    {
        return $this->mother;
    }

    /**
     * The mother of the child.
     *
     * @param ResourceReference $mother
     */
    public function setMother($mother)
    {
        $this->mother = $mother;
    }
    /**
     * child in the relationship.
     *
     * @return ResourceReference
     */
    public function getChild()
    {
        return $this->child;
    }

    /**
     * child in the relationship.
     *
     * @param ResourceReference $child
     */
    public function setChild($child)
    {
        $this->child = $child;
    }
    /**
     * The fact conclusions for the father.
     *
     * @return Fact[]
     */
    public function getFatherFacts()
    {
        return $this->fatherFacts;
    }

    /**
     * The fact conclusions for the father.
     *
     * @param Fact[] $fatherFacts
     */
    public function setFatherFacts($fatherFacts)
    {
        $this->fatherFacts = $fatherFacts;
    }
    /**
     * The fact conclusions for the mother.
     *
     * @return Fact[]
     */
    public function getMotherFacts()
    {
        return $this->motherFacts;
    }

    /**
     * The fact conclusions for the mother.
     *
     * @param Fact[] $motherFacts
     */
    public function setMotherFacts($motherFacts)
    {
        $this->motherFacts = $motherFacts;
    }
    /**
     * Returns the associative array for this ChildAndParentsRelationship
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->father) {
            $a["father"] = $this->father->toArray();
        }
        if ($this->mother) {
            $a["mother"] = $this->mother->toArray();
        }
        if ($this->child) {
            $a["child"] = $this->child->toArray();
        }
        if ($this->fatherFacts) {
            $ab = array();
            foreach ($this->fatherFacts as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['fatherFacts'] = $ab;
        }
        if ($this->motherFacts) {
            $ab = array();
            foreach ($this->motherFacts as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['motherFacts'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this ChildAndParentsRelationship from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['father'])) {
            $this->father = new ResourceReference($o["father"]);
        }
        if (isset($o['mother'])) {
            $this->mother = new ResourceReference($o["mother"]);
        }
        if (isset($o['child'])) {
            $this->child = new ResourceReference($o["child"]);
        }
        $this->fatherFacts = array();
        if (isset($o['fatherFacts'])) {
            foreach ($o['fatherFacts'] as $i => $x) {
                $this->fatherFacts[$i] = new Fact($x);
            }
        }
        $this->motherFacts = array();
        if (isset($o['motherFacts'])) {
            foreach ($o['motherFacts'] as $i => $x) {
                $this->motherFacts[$i] = new Fact($x);
            }
        }
    }

    /**
     * Sets a known child element of ChildAndParentsRelationship from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'father') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = new ResourceReference($xml);
            $this->father = $child;
            $happened = true;
        }
        else if (($xml->localName == 'mother') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = new ResourceReference($xml);
            $this->mother = $child;
            $happened = true;
        }
        else if (($xml->localName == 'child') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = new ResourceReference($xml);
            $this->child = $child;
            $happened = true;
        }
        else if (($xml->localName == 'fatherFact') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = new Fact($xml);
            if (!isset($this->fatherFacts)) {
                $this->fatherFacts = array();
            }
            array_push($this->fatherFacts, $child);
            $happened = true;
        }
        else if (($xml->localName == 'motherFact') && ($xml->namespaceURI == 'http://familysearch.org/v1/')) {
            $child = new Fact($xml);
            if (!isset($this->motherFacts)) {
                $this->motherFacts = array();
            }
            array_push($this->motherFacts, $child);
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of ChildAndParentsRelationship from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this ChildAndParentsRelationship to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('fs', 'childAndParentsRelationship', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
            $writer->writeAttributeNs('xmlns', 'fs', null, 'http://familysearch.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this ChildAndParentsRelationship to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->father) {
            $writer->startElementNs('fs', 'father', null);
            $this->father->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->mother) {
            $writer->startElementNs('fs', 'mother', null);
            $this->mother->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->child) {
            $writer->startElementNs('fs', 'child', null);
            $this->child->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->fatherFacts) {
            foreach ($this->fatherFacts as $i => $x) {
                $writer->startElementNs('fs', 'fatherFact', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->motherFacts) {
            foreach ($this->motherFacts as $i => $x) {
                $writer->startElementNs('fs', 'motherFact', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
    }
}
