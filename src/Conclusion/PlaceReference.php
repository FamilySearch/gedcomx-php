<?php
/**
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 */

namespace Gedcomx\Conclusion;

use Gedcomx\Common\ExtensibleData;
use Gedcomx\Common\TextValue;
use Gedcomx\Records\Field;
use Gedcomx\Rt\GedcomxModelVisitor;

/**
 * A reference to genealogical place.
 */
class PlaceReference extends ExtensibleData
{

    /**
     * A reference to a description of the place being referenced.
     *
     * @var string
     */
    private $descriptionRef;

    /**
     * The original value as supplied by the user.
     *
     * @var string
     */
    private $original;

    /**
     * The list of normalized values for the place, provided for display purposes by the application. Normalized values
     * are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
     *
     * @var \Gedcomx\Common\TextValue[]
     */
    private $normalizedExtensions;

    /**
     * The references to the record fields being used as evidence.
     *
     * @var \Gedcomx\Records\Field[]
     */
    private $fields;

    /**
     * Constructs a PlaceReference from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        } else {
            if ($o instanceof \XMLReader) {
                $success = true;
                while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                    $success = $o->read();
                }
                if ($o->nodeType != \XMLReader::ELEMENT) {
                    throw new \Exception("Unable to read XML: no start element found.");
                }

                $this->initFromReader($o);
            }
        }
    }

    /**
     * A reference to a description of the place being referenced.
     *
     * @return string
     */
    public function getDescriptionRef()
    {
        return $this->descriptionRef;
    }

    /**
     * A reference to a description of the place being referenced.
     *
     * @param string $descriptionRef
     */
    public function setDescriptionRef($descriptionRef)
    {
        $this->descriptionRef = $descriptionRef;
    }

    /**
     * The original value as supplied by the user.
     *
     * @return string
     */
    public function getOriginal()
    {
        return $this->original;
    }

    /**
     * The original value as supplied by the user.
     *
     * @param string $original
     */
    public function setOriginal($original)
    {
        $this->original = $original;
    }

    /**
     * The list of normalized values for the place, provided for display purposes by the application. Normalized values
     * are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
     *
     * @return \Gedcomx\Common\TextValue[]
     */
    public function getNormalizedExtensions()
    {
        return $this->normalizedExtensions;
    }

    /**
     * The list of normalized values for the place, provided for display purposes by the application. Normalized values
     * are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
     *
     * @param \Gedcomx\Common\TextValue[] $normalizedExtensions
     */
    public function setNormalizedExtensions(array $normalizedExtensions)
    {
        $this->normalizedExtensions = $normalizedExtensions;
    }

    /**
     * The references to the record fields being used as evidence.
     *
     * @return \Gedcomx\Records\Field[]
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * The references to the record fields being used as evidence.
     *
     * @param \Gedcomx\Records\Field[] $fields
     */
    public function setFields(array $fields)
    {
        $this->fields = $fields;
    }

    /**
     * Returns the associative array for this PlaceReference
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->descriptionRef) {
            $a["description"] = $this->descriptionRef;
        }
        if ($this->original) {
            $a["original"] = $this->original;
        }
        if ($this->normalizedExtensions) {
            $ab = array();
            foreach ($this->normalizedExtensions as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['normalized'] = $ab;
        }
        if ($this->fields) {
            $ab = array();
            foreach ($this->fields as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['fields'] = $ab;
        }

        return $a;
    }

    /**
     * Initializes this PlaceReference from an associative array
     *
     * @param array $o
     */
    public function initFromArray(array $o)
    {
        if (isset($o['description'])) {
            $this->descriptionRef = $o["description"];
            unset($o["description"]);
        }
        if (isset($o['original'])) {
            $this->original = $o["original"];
            unset($o["original"]);
        }
        $this->normalizedExtensions = array();
        if (isset($o['normalized'])) {
            foreach ($o['normalized'] as $i => $x) {
                $this->normalizedExtensions[$i] = new TextValue($x);
            }
            unset($o["normalized"]);
        }
        $this->fields = array();
        if (isset($o['fields'])) {
            foreach ($o['fields'] as $i => $x) {
                $this->fields[$i] = new Field($x);
            }
            unset($o["fields"]);
        }
        parent::initFromArray($o);
    }

    /**
     * @param \Gedcomx\Rt\GedcomxModelVisitor $visitor
     */
    public function accept(GedcomxModelVisitor $visitor)
    {
        $visitor->visitPlaceReference($this);
    }

    /**
     * Sets a known child element of PlaceReference from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement(\XMLReader $xml)
    {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
            return true;
        } else {
            if (($xml->localName == 'original') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                $child = '';
                while ($xml->read() && $xml->hasValue) {
                    $child = $child . $xml->value;
                }
                $this->original = $child;
                $happened = true;
            } else {
                if (($xml->localName == 'normalized') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                    $child = new TextValue($xml);
                    if (!isset($this->normalizedExtensions)) {
                        $this->normalizedExtensions = array();
                    }
                    array_push($this->normalizedExtensions, $child);
                    $happened = true;
                } else {
                    if (($xml->localName == 'field') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                        $child = new Field($xml);
                        if (!isset($this->fields)) {
                            $this->fields = array();
                        }
                        array_push($this->fields, $child);
                        $happened = true;
                    }
                }
            }
        }

        return $happened;
    }

    /**
     * Sets a known attribute of PlaceReference from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute(\XMLReader $xml)
    {
        if (parent::setKnownAttribute($xml)) {
            return true;
        } else {
            if (($xml->localName == 'description') && (empty($xml->namespaceURI))) {
                $this->descriptionRef = $xml->value;

                return true;
            }
        }

        return false;
    }

    /**
     * Writes the contents of this PlaceReference to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents(\XMLWriter $writer)
    {
        if ($this->descriptionRef) {
            $writer->writeAttribute('description', $this->descriptionRef);
        }
        parent::writeXmlContents($writer);
        if ($this->original) {
            $writer->startElementNs('gx', 'original', null);
            $writer->text($this->original);
            $writer->endElement();
        }
        if ($this->normalizedExtensions) {
            foreach ($this->normalizedExtensions as $i => $x) {
                $writer->startElementNs('gx', 'normalized', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->fields) {
            foreach ($this->fields as $i => $x) {
                $writer->startElementNs('gx', 'field', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
    }
}
