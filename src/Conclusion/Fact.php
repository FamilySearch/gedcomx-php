<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Conclusion;

use Gedcomx\Common\Qualifier;
use Gedcomx\Records\Field;
use Gedcomx\Rt\GedcomxModelVisitor;

/**
 * A conclusion about a fact applicable to a person or relationship.
 */
class Fact extends Conclusion
{
    /**
     * Whether this fact is the primary fact of the record from which the subject was extracted.
     *
     * @var boolean
     */
    private $primary;

    /**
     * The type of the fact.
     *
     * @var string
     */
    private $type;

    /**
     * The date of applicability of this fact.
     *
     * @var DateInfo
     */
    private $date;

    /**
     * The place of applicability of this fact.
     *
     * @var PlaceReference
     */
    private $place;

    /**
     * The value as supplied by the user.
     *
     * @var string
     */
    private $value;

    /**
     * The qualifiers associated with this fact.
     *
     * @var Qualifier[]
     */
    private $qualifiers;

    /**
     * The references to the record fields being used as evidence.
     *
     * @var Field[]
     */
    private $fields;

    /**
     * Constructs a Fact from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * Whether this fact is the primary fact of the record from which the subject was extracted.
     *
     * @return boolean
     */
    public function getPrimary()
    {
        return $this->primary;
    }

    /**
     * Whether this fact is the primary fact of the record from which the subject was extracted.
     *
     * @param boolean $primary
     */
    public function setPrimary($primary)
    {
        $this->primary = $primary;
    }
    /**
     * The type of the fact.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of the fact.
     *
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }
    /**
     * The date of applicability of this fact.
     *
     * @return DateInfo
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * The date of applicability of this fact.
     *
     * @param DateInfo $date
     */
    public function setDate($date)
    {
        $this->date = $date;
    }
    /**
     * The place of applicability of this fact.
     *
     * @return PlaceReference
     */
    public function getPlace()
    {
        return $this->place;
    }

    /**
     * The place of applicability of this fact.
     *
     * @param PlaceReference $place
     */
    public function setPlace($place)
    {
        $this->place = $place;
    }
    /**
     * The value as supplied by the user.
     *
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * The value as supplied by the user.
     *
     * @param string $value
     */
    public function setValue($value)
    {
        $this->value = $value;
    }
    /**
     * The qualifiers associated with this fact.
     *
     * @return Qualifier[]
     */
    public function getQualifiers()
    {
        return $this->qualifiers;
    }

    /**
     * The qualifiers associated with this fact.
     *
     * @param Qualifier[] $qualifiers
     */
    public function setQualifiers($qualifiers)
    {
        $this->qualifiers = $qualifiers;
    }
    /**
     * The references to the record fields being used as evidence.
     *
     * @return Field[]
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * The references to the record fields being used as evidence.
     *
     * @param Field[] $fields
     */
    public function setFields($fields)
    {
        $this->fields = $fields;
    }
    /**
     * Returns the associative array for this Fact
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->primary) {
            $a["primary"] = $this->primary;
        }
        if ($this->type) {
            $a["type"] = $this->type;
        }
        if ($this->date) {
            $a["date"] = $this->date->toArray();
        }
        if ($this->place) {
            $a["place"] = $this->place->toArray();
        }
        if ($this->value) {
            $a["value"] = $this->value;
        }
        if ($this->qualifiers) {
            $ab = array();
            foreach ($this->qualifiers as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['qualifiers'] = $ab;
        }
        if ($this->fields) {
            $ab = array();
            foreach ($this->fields as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['fields'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this Fact from an associative array
     *
     * @param array $o
     */
    public function initFromArray(array $o)
    {
        if (isset($o['primary'])) {
            $this->primary = $o["primary"];
            unset($o['primary']);
        }
        if (isset($o['type'])) {
            $this->type = $o["type"];
            unset($o['type']);
        }
        if (isset($o['date'])) {
            $this->date = $o['date'] instanceof DateInfo ? $o['date'] : new DateInfo($o["date"]);
            unset($o['date']);
        }
        if (isset($o['place'])) {
            $this->place = $o['place'] instanceof PlaceReference ? $o['place'] : new PlaceReference($o["place"]);
            unset($o['place']);
        }
        if (isset($o['value'])) {
            $this->value = $o["value"];
            unset($o['value']);
        }
        $this->qualifiers = array();
        if (isset($o['qualifiers'])) {
            foreach ($o['qualifiers'] as $i => $x) {
                $this->qualifiers[$i] = $x instanceof Qualifier ? $x : new Qualifier($x);
            }
            unset($o['qualifiers']);
        }
        $this->fields = array();
        if (isset($o['fields'])) {
            foreach ($o['fields'] as $i => $x) {
                $this->fields[$i] = $x instanceof Field ? $x : new Field($x);
            }
            unset($o['fields']);
        }
        parent::initFromArray($o);
    }

    public function accept(GedcomxModelVisitor $visitor)
    {
        $visitor->visitFact($this);
    }

    /**
     * Sets a known child element of Fact from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement(\XMLReader $xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'date') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new DateInfo($xml);
            $this->date = $child;
            $happened = true;
        }
        else if (($xml->localName == 'place') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new PlaceReference($xml);
            $this->place = $child;
            $happened = true;
        }
        else if (($xml->localName == 'value') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->value = $child;
            $happened = true;
        }
        else if (($xml->localName == 'qualifier') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new Qualifier($xml);
            if (!isset($this->qualifiers)) {
                $this->qualifiers = array();
            }
            array_push($this->qualifiers, $child);
            $happened = true;
        }
        else if (($xml->localName == 'field') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new Field($xml);
            if (!isset($this->fields)) {
                $this->fields = array();
            }
            array_push($this->fields, $child);
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Fact from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute(\XMLReader $xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
        else if (($xml->localName == 'primary') && (empty($xml->namespaceURI))) {
            $this->primary = $xml->value;
            return true;
        }
        else if (($xml->localName == 'type') && (empty($xml->namespaceURI))) {
            $this->type = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes this Fact to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml(\XMLWriter $writer, $includeNamespaces = true)
    {
        $writer->startElementNS('gx', 'fact', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this Fact to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents(\XMLWriter $writer)
    {
        if ($this->primary) {
            $writer->writeAttribute('primary', $this->primary);
        }
        if ($this->type) {
            $writer->writeAttribute('type', $this->type);
        }
        parent::writeXmlContents($writer);
        if ($this->date) {
            $writer->startElementNs('gx', 'date', null);
            $this->date->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->place) {
            $writer->startElementNs('gx', 'place', null);
            $this->place->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->value) {
            $writer->startElementNs('gx', 'value', null);
            $writer->text($this->value);
            $writer->endElement();
        }
        if ($this->qualifiers) {
            foreach ($this->qualifiers as $i => $x) {
                $writer->startElementNs('gx', 'qualifier', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->fields) {
            foreach ($this->fields as $i => $x) {
                $writer->startElementNs('gx', 'field', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
    }
}
