<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Conclusion;

use Gedcomx\Common\ExtensibleData;
use Gedcomx\Common\HasNotes;
use Gedcomx\Common\Attributable;
use Gedcomx\Common\Attribution;
use Gedcomx\Links\HypermediaEnabledData;
use Gedcomx\Source\ReferencesSources;

/**
 * A genealogical conclusion.
 */
class Conclusion extends HypermediaEnabledData implements Attributable, ReferencesSources, HasNotes
{

    /**
     * The level of confidence the contributor has about the data.
     *
     * @var string
     */
    private $confidence;

    /**
     * The language of the conclusion.
     *
     * @var string
     */
    private $lang;

    /**
     * Attribution metadata for a conclusion.
     *
     * @var \Gedcomx\Common\Attribution
     */
    private $attribution;

    /**
     * The source references for a conclusion.
     *
     * @var \Gedcomx\Source\SourceReference[]
     */
    private $sources;

    /**
     * A reference to the analysis document explaining the analysis that went into this conclusion.
     *
     * @var \Gedcomx\Common\ResourceReference
     */
    private $analysis;

    /**
     * Notes about a person.
     *
     * @var \Gedcomx\Common\Note[]
     */
    private $notes;

    /**
     * Constructs a Conclusion from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The level of confidence the contributor has about the data.
     *
     * @return string
     */
    public function getConfidence()
    {
        return $this->confidence;
    }

    /**
     * The level of confidence the contributor has about the data.
     *
     * @param string $confidence
     */
    public function setConfidence($confidence)
    {
        $this->confidence = $confidence;
    }
    /**
     * The language of the conclusion.
     *
     * @return string
     */
    public function getLang()
    {
        return $this->lang;
    }

    /**
     * The language of the conclusion.
     *
     * @param string $lang
     */
    public function setLang($lang)
    {
        $this->lang = $lang;
    }
    /**
     * Attribution metadata for a conclusion.
     *
     * @return \Gedcomx\Common\Attribution
     */
    public function getAttribution()
    {
        return $this->attribution;
    }

    /**
     * Attribution metadata for a conclusion.
     *
     * @param \Gedcomx\Common\Attribution $attribution
     */
    public function setAttribution( Attribution $attribution)
    {
        $this->attribution = $attribution;
    }
    /**
     * The source references for a conclusion.
     *
     * @return \Gedcomx\Source\SourceReference[]
     */
    public function getSources()
    {
        return $this->sources;
    }

    /**
     * The source references for a conclusion.
     *
     * @param \Gedcomx\Source\SourceReference[] $sources
     */
    public function setSources($sources)
    {
        $this->sources = $sources;
    }
    /**
     * A reference to the analysis document explaining the analysis that went into this conclusion.
     *
     * @return \Gedcomx\Common\ResourceReference
     */
    public function getAnalysis()
    {
        return $this->analysis;
    }

    /**
     * A reference to the analysis document explaining the analysis that went into this conclusion.
     *
     * @param \Gedcomx\Common\ResourceReference $analysis
     */
    public function setAnalysis($analysis)
    {
        $this->analysis = $analysis;
    }
    /**
     * Notes about a person.
     *
     * @return \Gedcomx\Common\Note[]
     */
    public function getNotes()
    {
        return $this->notes;
    }

    /**
     * Notes about a person.
     *
     * @param \Gedcomx\Common\Note[] $notes
     */
    public function setNotes($notes)
    {
        $this->notes = $notes;
    }
    /**
     * Returns the associative array for this Conclusion
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->confidence) {
            $a["confidence"] = $this->confidence;
        }
        if ($this->lang) {
            $a["lang"] = $this->lang;
        }
        if ($this->attribution) {
            $a["attribution"] = $this->attribution->toArray();
        }
        if ($this->sources) {
            $ab = array();
            foreach ($this->sources as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['sources'] = $ab;
        }
        if ($this->analysis) {
            $a["analysis"] = $this->analysis->toArray();
        }
        if ($this->notes) {
            $ab = array();
            foreach ($this->notes as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['notes'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this Conclusion from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['confidence'])) {
            $this->confidence = $o["confidence"];
        }
        if (isset($o['lang'])) {
            $this->lang = $o["lang"];
        }
        if (isset($o['attribution'])) {
            $this->attribution = new \Gedcomx\Common\Attribution($o["attribution"]);
        }
        $this->sources = array();
        if (isset($o['sources'])) {
            foreach ($o['sources'] as $i => $x) {
                $this->sources[$i] = new \Gedcomx\Source\SourceReference($x);
            }
        }
        if (isset($o['analysis'])) {
            $this->analysis = new \Gedcomx\Common\ResourceReference($o["analysis"]);
        }
        $this->notes = array();
        if (isset($o['notes'])) {
            foreach ($o['notes'] as $i => $x) {
                $this->notes[$i] = new \Gedcomx\Common\Note($x);
            }
        }
    }

    /**
     * Sets a known child element of Conclusion from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'attribution') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new \Gedcomx\Common\Attribution($xml);
            $this->attribution = $child;
            $happened = true;
        }
        else if (($xml->localName == 'source') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new \Gedcomx\Source\SourceReference($xml);
            if (!isset($this->sources)) {
                $this->sources = array();
            }
            array_push($this->sources, $child);
            $happened = true;
        }
        else if (($xml->localName == 'analysis') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new \Gedcomx\Common\ResourceReference($xml);
            $this->analysis = $child;
            $happened = true;
        }
        else if (($xml->localName == 'note') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new \Gedcomx\Common\Note($xml);
            if (!isset($this->notes)) {
                $this->notes = array();
            }
            array_push($this->notes, $child);
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Conclusion from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
        else if (($xml->localName == 'confidence') && (empty($xml->namespaceURI))) {
            $this->confidence = $xml->value;
            return true;
        }
        else if (($xml->localName == 'lang') && ($xml->namespaceURI == 'http://www.w3.org/XML/1998/namespace')) {
            $this->lang = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this Conclusion to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->confidence) {
            $writer->writeAttribute('confidence', $this->confidence);
        }
        if ($this->lang) {
            $writer->writeAttribute('xml:lang', $this->lang);
        }
        parent::writeXmlContents($writer);
        if ($this->attribution) {
            $writer->startElementNs('gx', 'attribution', null);
            $this->attribution->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->sources) {
            foreach ($this->sources as $i => $x) {
                $writer->startElementNs('gx', 'source', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->analysis) {
            $writer->startElementNs('gx', 'analysis', null);
            $this->analysis->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->notes) {
            foreach ($this->notes as $i => $x) {
                $writer->startElementNs('gx', 'note', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
    }

    /**
     * Merges data from provided object with current object
     *
     * @param ExtensibleData $conclusion
     */
    protected function embed(ExtensibleData $conclusion) {
        if( $this->lang == null ){
            $this->lang = $conclusion->lang;
        }
        if( $this->confidence == null ){
            $this->confidence = $conclusion->confidence;
        }
        if( $this->attribution == null ){
            $this->attribution = $conclusion->attribution;
        }
        if( $this->analysis == null ){
            $this->analysis = $conclusion->analysis;
        }
        if ($conclusion->notes != null) {
            if( $this->notes == null ){
                $this->notes = $conclusion->notes;
            } else {
                array_merge($this->notes, $conclusion->notes);
            }
        }
        if ($conclusion->sources != null) {
            if( $this->sources == null ){
                $this->sources = $conclusion->sources;
            } else {
                array_merge($this->sources, $conclusion->sources);
            }
        }
        parent::embed($conclusion);
    }

}
