<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Conclusion;
use Gedcomx\Rt\GedcomxModelVisitor;

/**
 * An abstract document that contains derived (conclusionary) text -- for example, a transcription or researcher analysis.
 */
class Document extends \Gedcomx\Conclusion\Conclusion
{
    /**
     * The text type of the document.
     *
     * @var string
     */
    private $textType;

    /**
     * Whether this document has been identified as &quot;extracted&quot;.
     *
     * @var boolean
     */
    private $extracted;

    /**
     * The type of the document.
     *
     * @var string
     */
    private $type;

    /**
     * The document text.
     *
     * @var string
     */
    private $text;

    /**
     * Constructs a Document from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The text type of the document.
     *
     * @return string
     */
    public function getTextType()
    {
        return $this->textType;
    }

    /**
     * The text type of the document.
     *
     * @param string $textType
     */
    public function setTextType($textType)
    {
        $this->textType = $textType;
    }
    /**
     * Whether this document has been identified as &quot;extracted&quot;.
     *
     * @return boolean
     */
    public function getExtracted()
    {
        return $this->extracted;
    }

    /**
     * Whether this document has been identified as &quot;extracted&quot;.
     *
     * @param boolean $extracted
     */
    public function setExtracted($extracted)
    {
        $this->extracted = $extracted;
    }
    /**
     * The type of the document.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * The type of the document.
     *
     * @param string $type
     */
    public function setType($type)
    {
        $this->type = $type;
    }
    /**
     * The document text.
     *
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * The document text.
     *
     * @param string $text
     */
    public function setText($text)
    {
        $this->text = $text;
    }
    /**
     * Returns the associative array for this Document
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->textType) {
            $a["textType"] = $this->textType;
        }
        if ($this->extracted) {
            $a["extracted"] = $this->extracted;
        }
        if ($this->type) {
            $a["type"] = $this->type;
        }
        if ($this->text) {
            $a["text"] = $this->text;
        }
        return $a;
    }


    /**
     * Initializes this Document from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['textType'])) {
            $this->textType = $o["textType"];
            unset($o["textType"]);
        }
        if (isset($o['extracted'])) {
            $this->extracted = $o["extracted"];
            unset($o["extracted"]);
        }
        if (isset($o['type'])) {
            $this->type = $o["type"];
            unset($o["type"]);
        }
        if (isset($o['text'])) {
            $this->text = $o["text"];
            unset($o["text"]);
        }
        parent::initFromArray($o);
    }

    public function accept(GedcomxModelVisitor $visitor)
    {
        $visitor->visitDocument($this);
    }

    /**
     * Sets a known child element of Document from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'text') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->text = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Document from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
        else if (($xml->localName == 'textType') && (empty($xml->namespaceURI))) {
            $this->textType = $xml->value;
            return true;
        }
        else if (($xml->localName == 'extracted') && (empty($xml->namespaceURI))) {
            $this->extracted = $xml->value;
            return true;
        }
        else if (($xml->localName == 'type') && (empty($xml->namespaceURI))) {
            $this->type = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes this Document to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('gx', 'document', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this Document to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->textType) {
            $writer->writeAttribute('textType', $this->textType);
        }
        if ($this->extracted) {
            $writer->writeAttribute('extracted', $this->extracted);
        }
        if ($this->type) {
            $writer->writeAttribute('type', $this->type);
        }
        parent::writeXmlContents($writer);
        if ($this->text) {
            $writer->startElementNs('gx', 'text', null);
            $writer->text($this->text);
            $writer->endElement();
        }
    }
}
