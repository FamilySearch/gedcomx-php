<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Atom;
use Gedcomx\Links\Link;
use Gedcomx\Records\Field;

/**
 * <p>The Atom data formats provide a format for web content and metadata syndication. The XML media type is defined by
 * <a href="http://tools.ietf.org/html/rfc4287#section-4">RFC 4287</a>. The JSON data format is specific to GEDCOM X
 * and is a translation to JSON from the XML.</p>
 */
class Feed extends ExtensibleElement
{

    /**
     * The author of the feed.
     *
     * @var Person[]
     */
    private $authors;

    /**
     * information about a category associated with the feed
     *
     * @var Person[]
     */
    private $contributors;

    /**
     * identifies the agent used to generate the feed
     *
     * @var Generator
     */
    private $generator;

    /**
     * identifies an image that provides iconic visual identification for the feed.
     *
     * @var string
     */
    private $icon;

    /**
     * a permanent, universally unique identifier for the feed.
     *
     * @var string
     */
    private $id;

    /**
     * The total number of results available, if this feed is supplying a subset of results, such as for a query.
     *
     * @var integer
     */
    private $results;

    /**
     * The index of the first entry in this page of data, if this feed is supplying a page of data.
     *
     * @var integer
     */
    private $index;

    /**
     * a reference from a feed to a Web resource.
     *
     * @var Link[]
     */
    private $links;

    /**
     * identifies an image that provides visual identification for the feed.
     *
     * @var string
     */
    private $logo;

    /**
     * information about rights held in and over the feed.
     *
     * @var string
     */
    private $rights;

    /**
     * a human-readable description or subtitle for the feed.
     *
     * @var string
     */
    private $subtitle;

    /**
     * a human-readable title for the feed
     *
     * @var string
     */
    private $title;

    /**
     * the most recent instant in time when the feed was modified in a way the publisher considers significant.
     *
     * @var integer
     */
    private $updated;

    /**
     * The entries in the feed.
     *
     * @var Entry[]
     */
    private $entries;

    /**
     * The list of facets for the feed, used for convenience in browsing and filtering.
     *
     * @var Field[]
     */
    private $facets;

    /**
     * Constructs a Feed from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The author of the feed.
     *
     * @return Person[]
     */
    public function getAuthors()
    {
        return $this->authors;
    }

    /**
     * The author of the feed.
     *
     * @param Person[] $authors
     */
    public function setAuthors($authors)
    {
        $this->authors = $authors;
    }
    /**
     * information about a category associated with the feed
     *
     * @return Person[]
     */
    public function getContributors()
    {
        return $this->contributors;
    }

    /**
     * information about a category associated with the feed
     *
     * @param Person[] $contributors
     */
    public function setContributors($contributors)
    {
        $this->contributors = $contributors;
    }
    /**
     * identifies the agent used to generate the feed
     *
     * @return Generator
     */
    public function getGenerator()
    {
        return $this->generator;
    }

    /**
     * identifies the agent used to generate the feed
     *
     * @param Generator $generator
     */
    public function setGenerator($generator)
    {
        $this->generator = $generator;
    }
    /**
     * identifies an image that provides iconic visual identification for the feed.
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->icon;
    }

    /**
     * identifies an image that provides iconic visual identification for the feed.
     *
     * @param string $icon
     */
    public function setIcon($icon)
    {
        $this->icon = $icon;
    }
    /**
     * a permanent, universally unique identifier for the feed.
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * a permanent, universally unique identifier for the feed.
     *
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    /**
     * The total number of results available, if this feed is supplying a subset of results, such as for a query.
     *
     * @return integer
     */
    public function getResults()
    {
        return $this->results;
    }

    /**
     * The total number of results available, if this feed is supplying a subset of results, such as for a query.
     *
     * @param integer $results
     */
    public function setResults($results)
    {
        $this->results = $results;
    }
    /**
     * The index of the first entry in this page of data, if this feed is supplying a page of data.
     *
     * @return integer
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * The index of the first entry in this page of data, if this feed is supplying a page of data.
     *
     * @param integer $index
     */
    public function setIndex($index)
    {
        $this->index = $index;
    }
    /**
     * a reference from a feed to a Web resource.
     *
     * @return Link[]
     */
    public function getLinks()
    {
        return $this->links;
    }

    /**
     * a reference from a feed to a Web resource.
     *
     * @param Link[] $links
     */
    public function setLinks($links)
    {
        $this->links = $links;
    }
    /**
     * identifies an image that provides visual identification for the feed.
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->logo;
    }

    /**
     * identifies an image that provides visual identification for the feed.
     *
     * @param string $logo
     */
    public function setLogo($logo)
    {
        $this->logo = $logo;
    }
    /**
     * information about rights held in and over the feed.
     *
     * @return string
     */
    public function getRights()
    {
        return $this->rights;
    }

    /**
     * information about rights held in and over the feed.
     *
     * @param string $rights
     */
    public function setRights($rights)
    {
        $this->rights = $rights;
    }
    /**
     * a human-readable description or subtitle for the feed.
     *
     * @return string
     */
    public function getSubtitle()
    {
        return $this->subtitle;
    }

    /**
     * a human-readable description or subtitle for the feed.
     *
     * @param string $subtitle
     */
    public function setSubtitle($subtitle)
    {
        $this->subtitle = $subtitle;
    }
    /**
     * a human-readable title for the feed
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * a human-readable title for the feed
     *
     * @param string $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }
    /**
     * the most recent instant in time when the feed was modified in a way the publisher considers significant.
     *
     * @return integer
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * the most recent instant in time when the feed was modified in a way the publisher considers significant.
     *
     * @param integer $updated
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;
    }
    /**
     * The entries in the feed.
     *
     * @return Entry[]
     */
    public function getEntries()
    {
        return $this->entries;
    }

    /**
     * The entries in the feed.
     *
     * @param Entry[] $entries
     */
    public function setEntries($entries)
    {
        $this->entries = $entries;
    }
    /**
     * The list of facets for the feed, used for convenience in browsing and filtering.
     *
     * @return Field[]
     */
    public function getFacets()
    {
        return $this->facets;
    }

    /**
     * The list of facets for the feed, used for convenience in browsing and filtering.
     *
     * @param Field[] $facets
     */
    public function setFacets($facets)
    {
        $this->facets = $facets;
    }
    /**
     * Returns the associative array for this Feed
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->authors) {
            $ab = array();
            foreach ($this->authors as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['authors'] = $ab;
        }
        if ($this->contributors) {
            $ab = array();
            foreach ($this->contributors as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['contributors'] = $ab;
        }
        if ($this->generator) {
            $a["generator"] = $this->generator->toArray();
        }
        if ($this->icon) {
            $a["icon"] = $this->icon;
        }
        if ($this->id) {
            $a["id"] = $this->id;
        }
        if ($this->results) {
            $a["results"] = $this->results;
        }
        if ($this->index) {
            $a["index"] = $this->index;
        }
        if ($this->links) {
            $ab = array();
            foreach ($this->links as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['links'] = $ab;
        }
        if ($this->logo) {
            $a["logo"] = $this->logo;
        }
        if ($this->rights) {
            $a["rights"] = $this->rights;
        }
        if ($this->subtitle) {
            $a["subtitle"] = $this->subtitle;
        }
        if ($this->title) {
            $a["title"] = $this->title;
        }
        if ($this->updated) {
            $a["updated"] = $this->updated;
        }
        if ($this->entries) {
            $ab = array();
            foreach ($this->entries as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['entries'] = $ab;
        }
        if ($this->facets) {
            $ab = array();
            foreach ($this->facets as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['facets'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this Feed from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        $this->authors = array();
        if (isset($o['authors'])) {
            foreach ($o['authors'] as $i => $x) {
                $this->authors[$i] = new Person($x);
            }
            unset($o['authors']);
        }
        $this->contributors = array();
        if (isset($o['contributors'])) {
            foreach ($o['contributors'] as $i => $x) {
                $this->contributors[$i] = new Person($x);
            }
            unset($o['contributors']);
        }
        if (isset($o['generator'])) {
            $this->generator = new Generator($o["generator"]);
            unset($o['generator']);
        }
        if (isset($o['icon'])) {
            $this->icon = $o["icon"];
            unset($o['icon']);
        }
        if (isset($o['id'])) {
            $this->id = $o["id"];
            unset($o['id']);
        }
        if (isset($o['results'])) {
            $this->results = $o["results"];
            unset($o['results']);
        }
        if (isset($o['index'])) {
            $this->index = $o["index"];
            unset($o['index']);
        }
        $this->links = array();
        if (isset($o['links'])) {
            foreach ($o['links'] as $i => $x) {
                if( ! array_key_exists("rel", $x) ){
                    $x["rel"] = $i;
                }
                $this->links[$i] = new Link($x);
            }
            unset($o['links']);
        }
        if (isset($o['logo'])) {
            $this->logo = $o["logo"];
            unset($o['logo']);
        }
        if (isset($o['rights'])) {
            $this->rights = $o["rights"];
            unset($o['rights']);
        }
        if (isset($o['subtitle'])) {
            $this->subtitle = $o["subtitle"];
            unset($o['subtitle']);
        }
        if (isset($o['title'])) {
            $this->title = $o["title"];
            unset($o['title']);
        }
        if (isset($o['updated'])) {
            $this->updated = $o["updated"];
            unset($o['updated']);
        }
        $this->entries = array();
        if (isset($o['entries'])) {
            foreach ($o['entries'] as $i => $x) {
                $this->entries[$i] = new Entry($x);
            }
            unset($o['entries']);
        }
        $this->facets = array();
        if (isset($o['facets'])) {
            foreach ($o['facets'] as $i => $x) {
                $this->facets[$i] = new Field($x);
            }
            unset($o['facets']);
        }
        parent::initFromArray($o);
    }

    /**
     * Sets a known child element of Feed from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'author') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = new Person($xml);
            if (!isset($this->authors)) {
                $this->authors = array();
            }
            array_push($this->authors, $child);
            $happened = true;
        }
        else if (($xml->localName == 'contributor') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = new Person($xml);
            if (!isset($this->contributors)) {
                $this->contributors = array();
            }
            array_push($this->contributors, $child);
            $happened = true;
        }
        else if (($xml->localName == 'generator') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = new Generator($xml);
            $this->generator = $child;
            $happened = true;
        }
        else if (($xml->localName == 'icon') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->icon = $child;
            $happened = true;
        }
        else if (($xml->localName == 'id') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->id = $child;
            $happened = true;
        }
        else if (($xml->localName == 'results') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->results = $child;
            $happened = true;
        }
        else if (($xml->localName == 'index') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->index = $child;
            $happened = true;
        }
        else if (($xml->localName == 'link') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = new Link($xml);
            if (!isset($this->links)) {
                $this->links = array();
            }
            array_push($this->links, $child);
            $happened = true;
        }
        else if (($xml->localName == 'logo') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->logo = $child;
            $happened = true;
        }
        else if (($xml->localName == 'rights') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->rights = $child;
            $happened = true;
        }
        else if (($xml->localName == 'subtitle') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->subtitle = $child;
            $happened = true;
        }
        else if (($xml->localName == 'title') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->title = $child;
            $happened = true;
        }
        else if (($xml->localName == 'updated') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->updated = $child;
            $happened = true;
        }
        else if (($xml->localName == 'entry') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = new Entry($xml);
            if (!isset($this->entries)) {
                $this->entries = array();
            }
            array_push($this->entries, $child);
            $happened = true;
        }
        else if (($xml->localName == 'facet') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = new Field($xml);
            if (!isset($this->facets)) {
                $this->facets = array();
            }
            array_push($this->facets, $child);
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Feed from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this Feed to an XML writer.
     *
     * @param \XMLWriter $writer            The XML writer.
     * @param bool       $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('atom', 'feed', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
            $writer->writeAttributeNs('xmlns', 'atom', null, 'http://www.w3.org/2005/Atom');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this Feed to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->authors) {
            foreach ($this->authors as $i => $x) {
                $writer->startElementNs('atom', 'author', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->contributors) {
            foreach ($this->contributors as $i => $x) {
                $writer->startElementNs('atom', 'contributor', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->generator) {
            $writer->startElementNs('atom', 'generator', null);
            $this->generator->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->icon) {
            $writer->startElementNs('atom', 'icon', null);
            $writer->text($this->icon);
            $writer->endElement();
        }
        if ($this->id) {
            $writer->startElementNs('atom', 'id', null);
            $writer->text($this->id);
            $writer->endElement();
        }
        if ($this->results) {
            $writer->startElementNs('gx', 'results', null);
            $writer->text($this->results);
            $writer->endElement();
        }
        if ($this->index) {
            $writer->startElementNs('gx', 'index', null);
            $writer->text($this->index);
            $writer->endElement();
        }
        if ($this->links) {
            foreach ($this->links as $i => $x) {
                $writer->startElementNs('atom', 'link', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->logo) {
            $writer->startElementNs('atom', 'logo', null);
            $writer->text($this->logo);
            $writer->endElement();
        }
        if ($this->rights) {
            $writer->startElementNs('atom', 'rights', null);
            $writer->text($this->rights);
            $writer->endElement();
        }
        if ($this->subtitle) {
            $writer->startElementNs('atom', 'subtitle', null);
            $writer->text($this->subtitle);
            $writer->endElement();
        }
        if ($this->title) {
            $writer->startElementNs('atom', 'title', null);
            $writer->text($this->title);
            $writer->endElement();
        }
        if ($this->updated) {
            $writer->startElementNs('atom', 'updated', null);
            $writer->text($this->updated);
            $writer->endElement();
        }
        if ($this->entries) {
            foreach ($this->entries as $i => $x) {
                $writer->startElementNs('atom', 'entry', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->facets) {
            foreach ($this->facets as $i => $x) {
                $writer->startElementNs('atom', 'facet', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
    }
}
