<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Atom;

/**
 * A Person construct is an element that describes a person, corporation, or similar entity
 */
class Person extends \Gedcomx\Atom\ExtensibleElement
{

    /**
     * a human-readable name for the person.
     *
     * @var string
     */
    private $name;

    /**
     * an IRI associated with the person.
     *
     * @var string
     */
    private $uri;

    /**
     * an e-mail address associated with the person.
     *
     * @var string
     */
    private $email;

    /**
     * Constructs a Person from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * a human-readable name for the person.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * a human-readable name for the person.
     *
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }
    /**
     * an IRI associated with the person.
     *
     * @return string
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * an IRI associated with the person.
     *
     * @param string $uri
     */
    public function setUri($uri)
    {
        $this->uri = $uri;
    }
    /**
     * an e-mail address associated with the person.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * an e-mail address associated with the person.
     *
     * @param string $email
     */
    public function setEmail($email)
    {
        $this->email = $email;
    }
    /**
     * Returns the associative array for this Person
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->name) {
            $a["name"] = $this->name;
        }
        if ($this->uri) {
            $a["uri"] = $this->uri;
        }
        if ($this->email) {
            $a["email"] = $this->email;
        }
        return $a;
    }


    /**
     * Initializes this Person from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['name'])) {
            $this->name = $o["name"];
        }
        if (isset($o['uri'])) {
            $this->uri = $o["uri"];
        }
        if (isset($o['email'])) {
            $this->email = $o["email"];
        }
    }

    /**
     * Sets a known child element of Person from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'name') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->name = $child;
            $happened = true;
        }
        else if (($xml->localName == 'uri') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->uri = $child;
            $happened = true;
        }
        else if (($xml->localName == 'email') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->email = $child;
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of Person from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this Person to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->name) {
            $writer->startElementNs('atom', 'name', null);
            $writer->text($this->name);
            $writer->endElement();
        }
        if ($this->uri) {
            $writer->startElementNs('atom', 'uri', null);
            $writer->text($this->uri);
            $writer->endElement();
        }
        if ($this->email) {
            $writer->startElementNs('atom', 'email', null);
            $writer->text($this->email);
            $writer->endElement();
        }
    }
}
