<?php
/**
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 */

namespace Gedcomx\Atom;

use Gedcomx\Links\Link;
use Gedcomx\Links\SupportsLinks;

/**
 * The "atom:entry" element represents an individual entry, acting as a container for metadata and data associated with
 * the entry.
 */
class Entry extends ExtensibleElement implements SupportsLinks
{
    /**
     * The author of the entry.
     *
     * @var \Gedcomx\Atom\Person[]
     */
    private $authors;

    /**
     * information about a category associated with an entry.
     *
     * @var \Gedcomx\Atom\Category[]
     */
    private $categories;

    /**
     * The confidence of the result, if this entry represents a search result.
     *
     * @var string
     */
    private $confidence;

    /**
     * The content of the entry.
     *
     * @var \Gedcomx\Atom\Content
     */
    private $content;

    /**
     * information about a category associated with the entry
     *
     * @var \Gedcomx\Atom\Person[]
     */
    private $contributors;

    /**
     * a permanent, universally unique identifier for the entry.
     *
     * @var string
     */
    private $id;

    /**
     * a reference from a entry to a Web resource.
     *
     * @var \Gedcomx\Links\Link[]
     */
    private $links;

    /**
     * instant in time associated with an event early in the life cycle of the entry.
     *
     * @var integer
     */
    private $published;

    /**
     * information about rights held in and over the entry.
     *
     * @var string
     */
    private $rights;

    /**
     * The relevance score.
     *
     * @var double
     */
    private $score;

    /**
     * a human-readable title for the entry
     *
     * @var string
     */
    private $title;

    /**
     * the most recent instant in time when the entry was modified in a way the publisher considers significant.
     *
     * @var integer
     */
    private $updated;

    /**
     * Additional attributes.
     *
     * @var array
     */
    private $otherAttributes = array();

    /**
     * Constructs a Entry from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        } else {
            if ($o instanceof \XMLReader) {
                $success = true;
                while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                    $success = $o->read();
                }
                if ($o->nodeType != \XMLReader::ELEMENT) {
                    throw new \Exception("Unable to read XML: no start element found.");
                }

                $this->initFromReader($o);
            }
        }
        if ($this->links == null) {
            $this->links = array();
        }
    }

    /**
     * The author of the entry.
     *
     * @return \Gedcomx\Atom\Person[]
     */
    public function getAuthors()
    {
        return $this->authors;
    }

    /**
     * The author of the entry.
     *
     * @param \Gedcomx\Atom\Person[] $authors
     */
    public function setAuthors($authors)
    {
        $this->authors = $authors;
    }

    /**
     * information about a category associated with an entry.
     *
     * @return \Gedcomx\Atom\Category[]
     */
    public function getCategories()
    {
        return $this->categories;
    }

    /**
     * information about a category associated with an entry.
     *
     * @param \Gedcomx\Atom\Category[] $categories
     */
    public function setCategories($categories)
    {
        $this->categories = $categories;
    }

    /**
     * The confidence of the result, if this entry represents a search result.
     *
     * @return string
     */
    public function getConfidence()
    {
        return $this->confidence;
    }

    /**
     * The confidence of the result, if this entry represents a search result.
     *
     * @param string $confidence
     */
    public function setConfidence($confidence)
    {
        $this->confidence = $confidence;
    }

    /**
     * The content of the entry.
     *
     * @return \Gedcomx\Atom\Content
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * The content of the entry.
     *
     * @param \Gedcomx\Atom\Content $content
     */
    public function setContent(Content $content)
    {
        $this->content = $content;
    }

    /**
     * information about a category associated with the entry
     *
     * @return \Gedcomx\Atom\Person[]
     */
    public function getContributors()
    {
        return $this->contributors;
    }

    /**
     * information about a category associated with the entry
     *
     * @param \Gedcomx\Atom\Person[] $contributors
     */
    public function setContributors(array $contributors)
    {
        $this->contributors = $contributors;
    }

    /**
     * a permanent, universally unique identifier for the entry.
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * a permanent, universally unique identifier for the entry.
     *
     * @param string $id
     */
    public function setId($id)
    {
        $this->id = $id;
    }

    /**
     * a reference from a entry to a Web resource.
     *
     * @return Link[]
     */
    public function getLinks()
    {
        return $this->links;
    }

    /**
     * a reference from a entry to a Web resource.
     *
     * @param Link[] $links
     */
    public function setLinks(array $links)
    {
        $this->links = $links;
    }

    /**
     * instant in time associated with an event early in the life cycle of the entry.
     *
     * @return integer
     */
    public function getPublished()
    {
        return $this->published;
    }

    /**
     * instant in time associated with an event early in the life cycle of the entry.
     *
     * @param integer $published
     */
    public function setPublished($published)
    {
        $this->published = $published;
    }

    /**
     * information about rights held in and over the entry.
     *
     * @return string
     */
    public function getRights()
    {
        return $this->rights;
    }

    /**
     * information about rights held in and over the entry.
     *
     * @param string $rights
     */
    public function setRights($rights)
    {
        $this->rights = $rights;
    }

    /**
     * The relevance score.
     *
     * @return double
     */
    public function getScore()
    {
        return $this->score;
    }

    /**
     * The relevance score.
     *
     * @param double $score
     */
    public function setScore($score)
    {
        $this->score = $score;
    }

    /**
     * a human-readable title for the entry
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * a human-readable title for the entry
     *
     * @param string $title
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }

    /**
     * the most recent instant in time when the entry was modified in a way the publisher considers significant.
     *
     * @return integer
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * the most recent instant in time when the entry was modified in a way the publisher considers significant.
     *
     * @param integer $updated
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;
    }

    /**
     * Returns the associative array for this Entry
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->authors) {
            $ab = array();
            foreach ($this->authors as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['authors'] = $ab;
        }
        if ($this->categories) {
            $ab = array();
            foreach ($this->categories as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['categories'] = $ab;
        }
        if ($this->confidence) {
            $a["confidence"] = $this->confidence;
        }
        if ($this->content) {
            $a["content"] = $this->content->toArray();
        }
        if ($this->contributors) {
            $ab = array();
            foreach ($this->contributors as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['contributors'] = $ab;
        }
        if ($this->id) {
            $a["id"] = $this->id;
        }
        if ($this->links) {
            $ab = array();
            foreach ($this->links as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['links'] = $ab;
        }
        if ($this->published) {
            $a["published"] = $this->published;
        }
        if ($this->rights) {
            $a["rights"] = $this->rights;
        }
        if ($this->score) {
            $a["score"] = $this->score;
        }
        if ($this->title) {
            $a["title"] = $this->title;
        }
        if ($this->updated) {
            $a["updated"] = $this->updated;
        }

        return $a;
    }

    /**
     * Initializes this Entry from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        $this->authors = array();
        if (isset($o['authors'])) {
            foreach ($o['authors'] as $i => $x) {
                $this->authors[$i] = new Person($x);
            }
            unset($o['authors']);
        }
        $this->categories = array();
        if (isset($o['categories'])) {
            foreach ($o['categories'] as $i => $x) {
                $this->categories[$i] = new Category($x);
            }
            unset($o['categories']);
        }
        if (isset($o['confidence'])) {
            $this->confidence = $o["confidence"];
            unset($o['confidence']);
        }
        if (isset($o['content'])) {
            $this->content = new Content($o["content"]);
            unset($o['content']);
        }
        $this->contributors = array();
        if (isset($o['contributors'])) {
            foreach ($o['contributors'] as $i => $x) {
                $this->contributors[$i] = new Person($x);
            }
            unset($o['contributors']);
        }
        if (isset($o['id'])) {
            $this->id = $o["id"];
            unset($o['id']);
        }
        $this->links = array();
        if (isset($o['links'])) {
            foreach ($o['links'] as $i => $x) {
                if (!array_key_exists("rel", $x)) {
                    $x["rel"] = $i;
                }
                $this->links[$i] = new Link($x);
            }
            unset($o['links']);
        }
        if (isset($o['published'])) {
            $this->published = $o["published"];
            unset($o['published']);
        }
        if (isset($o['rights'])) {
            $this->rights = $o["rights"];
            unset($o['rights']);
        }
        if (isset($o['score'])) {
            $this->score = $o["score"];
            unset($o['score']);
        }
        if (isset($o['title'])) {
            $this->title = $o["title"];
            unset($o['title']);
        }
        if (isset($o['updated'])) {
            $this->updated = $o["updated"];
            unset($o['updated']);
        }
        parent::initFromArray($o);
    }

    /**
     * Sets a known child element of Entry from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml)
    {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
            return true;
        } else {
            if (($xml->localName == 'author') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                $child = new Person($xml);
                if (!isset($this->authors)) {
                    $this->authors = array();
                }
                array_push($this->authors, $child);
                $happened = true;
            } else {
                if (($xml->localName == 'category') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                    $child = new Category($xml);
                    if (!isset($this->categories)) {
                        $this->categories = array();
                    }
                    array_push($this->categories, $child);
                    $happened = true;
                } else {
                    if (($xml->localName == 'confidence') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                        $child = '';
                        while ($xml->read() && $xml->hasValue) {
                            $child = $child . $xml->value;
                        }
                        $this->confidence = $child;
                        $happened = true;
                    } else {
                        if (($xml->localName == 'content') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                            $child = new Content($xml);
                            $this->content = $child;
                            $happened = true;
                        } else {
                            if (($xml->localName == 'contributor') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                $child = new Person($xml);
                                if (!isset($this->contributors)) {
                                    $this->contributors = array();
                                }
                                array_push($this->contributors, $child);
                                $happened = true;
                            } else {
                                if (($xml->localName == 'id') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                    $child = '';
                                    while ($xml->read() && $xml->hasValue) {
                                        $child = $child . $xml->value;
                                    }
                                    $this->id = $child;
                                    $happened = true;
                                } else {
                                    if (($xml->localName == 'link') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                        $child = new Link($xml);
                                        if (!isset($this->links)) {
                                            $this->links = array();
                                        }
                                        array_push($this->links, $child);
                                        $happened = true;
                                    } else {
                                        if (($xml->localName == 'published') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                            $child = '';
                                            while ($xml->read() && $xml->hasValue) {
                                                $child = $child . $xml->value;
                                            }
                                            $this->published = $child;
                                            $happened = true;
                                        } else {
                                            if (($xml->localName == 'rights') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                                $child = '';
                                                while ($xml->read() && $xml->hasValue) {
                                                    $child = $child . $xml->value;
                                                }
                                                $this->rights = $child;
                                                $happened = true;
                                            } else {
                                                if (($xml->localName == 'score') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                                                    $child = '';
                                                    while ($xml->read() && $xml->hasValue) {
                                                        $child = $child . $xml->value;
                                                    }
                                                    $this->score = $child;
                                                    $happened = true;
                                                } else {
                                                    if (($xml->localName == 'title') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                                        $child = '';
                                                        while ($xml->read() && $xml->hasValue) {
                                                            $child = $child . $xml->value;
                                                        }
                                                        $this->title = $child;
                                                        $happened = true;
                                                    } else {
                                                        if (($xml->localName == 'updated') && ($xml->namespaceURI == 'http://www.w3.org/2005/Atom')) {
                                                            $child = '';
                                                            while ($xml->read() && $xml->hasValue) {
                                                                $child = $child . $xml->value;
                                                            }
                                                            $this->updated = $child;
                                                            $happened = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return $happened;
    }

    /**
     * Sets a known attribute of Entry from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml)
    {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this Entry to an XML writer.
     *
     * @param \XMLWriter $writer            The XML writer.
     * @param bool       $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('atom', 'entry', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
            $writer->writeAttributeNs('xmlns', 'atom', null, 'http://www.w3.org/2005/Atom');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this Entry to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->authors) {
            foreach ($this->authors as $i => $x) {
                $writer->startElementNs('atom', 'author', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->categories) {
            foreach ($this->categories as $i => $x) {
                $writer->startElementNs('atom', 'category', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->confidence) {
            $writer->startElementNs('gx', 'confidence', null);
            $writer->text($this->confidence);
            $writer->endElement();
        }
        if ($this->content) {
            $writer->startElementNs('atom', 'content', null);
            $this->content->writeXmlContents($writer);
            $writer->endElement();
        }
        if ($this->contributors) {
            foreach ($this->contributors as $i => $x) {
                $writer->startElementNs('atom', 'contributor', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->id) {
            $writer->startElementNs('atom', 'id', null);
            $writer->text($this->id);
            $writer->endElement();
        }
        if ($this->links) {
            foreach ($this->links as $i => $x) {
                $writer->startElementNs('atom', 'link', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->published) {
            $writer->startElementNs('atom', 'published', null);
            $writer->text($this->published);
            $writer->endElement();
        }
        if ($this->rights) {
            $writer->startElementNs('atom', 'rights', null);
            $writer->text($this->rights);
            $writer->endElement();
        }
        if ($this->score) {
            $writer->startElementNs('gx', 'score', null);
            $writer->text($this->score);
            $writer->endElement();
        }
        if ($this->title) {
            $writer->startElementNs('atom', 'title', null);
            $writer->text($this->title);
            $writer->endElement();
        }
        if ($this->updated) {
            $writer->startElementNs('atom', 'updated', null);
            $writer->text($this->updated);
            $writer->endElement();
        }
    }

    /**
     * Add a link.
     *
     * @param Link $link
     *
      */
    public function addLink(Link $link)
    {
        $this->links[] = $link;
    }

    /**
     * Add a hypermedia link relationship
     *
     * @param string $rel  see Gedcom\Rs\Client\Rel
     * @param string $href The target URI.
     */
    public function addLinkRelation($rel, $href)
    {
        $this->links[] = new Link(array(
                                      "rel"  => $rel,
                                      "href" => $href
                                  ));
    }

    /**
     * Add a templated link.
     *
     * @param string $rel      see Gedcom\Rs\Client\Rel
     * @param string $template The link template.
     */
    public function addTemplatedLink($rel, $template)
    {
        $this->links[] = new Link(array(
                                      "rel"      => $rel,
                                      "template" => $template
                                  ));
    }

    /**
     * Get a link by its rel.
     *
     * @param string $rel see Gedcom\Rs\Client\Rel
     *
     * @return Link
     */
    public function getLink($rel)
    {
        foreach ($this->links as $idx => $link) {
            if ($link->getRel() == $rel) {
                return $link;
            }
        }

        return null;
    }

    /**
     * Get a list of links by rel.
     *
     * @param string $rel see Gedcom\Rs\Client\Rel
     *
     * @return Link[]
     */
    public function getLinksByRel($rel)
    {
        $links = array();
        foreach ($this->links as $idx => $link) {
            if ($link->getRel() == $rel) {
                $links[] = $rel;
            }
        }

        return $links;
    }
}
