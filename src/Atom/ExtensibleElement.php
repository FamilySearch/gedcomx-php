<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Atom;

/**
 * 
 */
class ExtensibleElement extends CommonAttributes
{
    /**
     * Constructs a ExtensibleElement from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * Custom extension elements for a conclusion.
     *
     * @return array Custom extension elements for a conclusion.
     */
    public function getExtensionElements() {
        return $this->extensionElements;
    }

    /**
     * Custom extension elements for a conclusion.
     *
     * @param array $elements Custom extension elements for a conclusion.
     */
    public function setExtensionElements(array $elements)
    {
        $this->extensionElements = $elements;
    }

    /**
     * Add an extension element.
     *
     * @param mixed $element The extension element to add.
     */
    public function addExtensionElement($element)
    {
        if ($this->extensionElements == null) {
            $this->extensionElements = array();
        }

        $this->extensionElements[] = $element;
    }

    /**
     * Remove extension elements of a given type.
     *
     * @param string $class The type of extension element to remove.
     *
     * @return array The removed extension elements.
     */
    public function removeExtensionElements($class)
    {
        $removed = array();
        if ($this->extensionElements != null) {
            foreach ($this->extensionElements as $idx => $e) {
                if (get_class($e) == $class) {
                    $removed[] = $e;
                    unset($this->extensionElements[$idx]);
                }
            }
        }

        return $removed;
    }

    /**
     * Sets an extension element by first removing all previous elements of the same type, then adding it to the list.
     *
     * @param mixed $element The element to set.
     */
    public function setExtensionElement($element)
    {
        $this->removeExtensionElements(get_class($element));
        $this->addExtensionElement($element);
    }

    /**
     * Finds the first extension of a specified type.
     *
     * @param string $class The type.
     *
     * @return mixed The extension, or null if none found.
     */
    public function findExtensionOfType($class)
    {
        $candidates = $this->findExtensionsOfType($class);

        if (count($candidates) > 0) {
            return $candidates[0];
        }

        return null;
    }

    /**
     * Find the extensions of a specified type.
     *
     * @param string $class The type.
     *
     * @return array The extensions, possibly empty but not null.
     */
    public function findExtensionsOfType($class)
    {
        $ext = array();
        if ($this->extensionElements != null) {
            foreach ($this->extensionElements as $e) {
                if (get_class($e) == $class) {
                    $ext[] = $e;
                }
            }
        }

        return $ext;
    }

    /**
     * Returns the associative array for this ExtensibleElement
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        return $a;
    }


    /**
     * Initializes this ExtensibleElement from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
    }

    /**
     * Sets a known child element of ExtensibleElement from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of ExtensibleElement from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this ExtensibleElement to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
    }
}
