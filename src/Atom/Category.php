<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Atom;

/**
 * conveys information about a category associated with an entry or feed.
 */
class Category extends \Gedcomx\Atom\CommonAttributes
{

    /**
     * identifies a categorization scheme
     *
     * @var string
     */
    private $scheme;

    /**
     * identifies the category to which the entry or feed belongs
     *
     * @var string
     */
    private $term;

    /**
     * a human-readable label for display in end-user applications
     *
     * @var string
     */
    private $label;

    /**
     * Constructs a Category from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * identifies a categorization scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->scheme;
    }

    /**
     * identifies a categorization scheme
     *
     * @param string $scheme
     */
    public function setScheme($scheme)
    {
        $this->scheme = $scheme;
    }
    /**
     * identifies the category to which the entry or feed belongs
     *
     * @return string
     */
    public function getTerm()
    {
        return $this->term;
    }

    /**
     * identifies the category to which the entry or feed belongs
     *
     * @param string $term
     */
    public function setTerm($term)
    {
        $this->term = $term;
    }
    /**
     * a human-readable label for display in end-user applications
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }

    /**
     * a human-readable label for display in end-user applications
     *
     * @param string $label
     */
    public function setLabel($label)
    {
        $this->label = $label;
    }
    /**
     * Returns the associative array for this Category
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->scheme) {
            $a["scheme"] = $this->scheme;
        }
        if ($this->term) {
            $a["term"] = $this->term;
        }
        if ($this->label) {
            $a["label"] = $this->label;
        }
        return $a;
    }


    /**
     * Initializes this Category from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        if (isset($o['scheme'])) {
            $this->scheme = $o["scheme"];
            unset($o['scheme']);
        }
        if (isset($o['term'])) {
            $this->term = $o["term"];
            unset($o['term']);
        }
        if (isset($o['label'])) {
            $this->label = $o["label"];
            unset($o['label']);
        }
        parent::initFromArray($o);
    }

    /**
     * Sets a known child element of Category from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        return false;
    }

    /**
     * Sets a known attribute of Category from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
        else if (($xml->localName == 'scheme') && (empty($xml->namespaceURI))) {
            $this->scheme = $xml->value;
            return true;
        }
        else if (($xml->localName == 'term') && (empty($xml->namespaceURI))) {
            $this->term = $xml->value;
            return true;
        }
        else if (($xml->localName == 'label') && (empty($xml->namespaceURI))) {
            $this->label = $xml->value;
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this Category to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        if ($this->scheme) {
            $writer->writeAttribute('scheme', $this->scheme);
        }
        if ($this->term) {
            $writer->writeAttribute('term', $this->term);
        }
        if ($this->label) {
            $writer->writeAttribute('label', $this->label);
        }
        parent::writeXmlContents($writer);
    }
}
