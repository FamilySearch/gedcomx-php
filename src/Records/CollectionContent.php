<?php
/**
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 */

namespace Gedcomx\Records;

use Gedcomx\Links\HypermediaEnabledData;

/**
 * A description of the content of a collection by resource type.
 */
class CollectionContent extends HypermediaEnabledData
{
    /**
     * A completeness factor for this content aspect, a value between 0 and 1.
     *
     * @var double
     */
    private $completeness;

    /**
     * The count of the items applicable to this content aspect.
     *
     * @var integer
     */
    private $count;

    /**
     * The type of resource being covered in this collection.
     *
     * @var string
     */
    private $resourceType;

    /**
     * Constructs a CollectionContent from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     *
     * @throws \Exception
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        } else {
            if ($o instanceof \XMLReader) {
                $success = true;
                while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                    $success = $o->read();
                }
                if ($o->nodeType != \XMLReader::ELEMENT) {
                    throw new \Exception("Unable to read XML: no start element found.");
                }

                $this->initFromReader($o);
            }
        }
    }

    /**
     * A completeness factor for this content aspect, a value between 0 and 1.
     *
     * @return double
     */
    public function getCompleteness()
    {
        return $this->completeness;
    }

    /**
     * A completeness factor for this content aspect, a value between 0 and 1.
     *
     * @param double $completeness
     */
    public function setCompleteness($completeness)
    {
        $this->completeness = $completeness;
    }

    /**
     * The count of the items applicable to this content aspect.
     *
     * @return integer
     */
    public function getCount()
    {
        return $this->count;
    }

    /**
     * The count of the items applicable to this content aspect.
     *
     * @param integer $count
     */
    public function setCount($count)
    {
        $this->count = $count;
    }

    /**
     * The type of resource being covered in this collection.
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->resourceType;
    }

    /**
     * The type of resource being covered in this collection.
     *
     * @param string $resourceType
     */
    public function setResourceType($resourceType)
    {
        $this->resourceType = $resourceType;
    }

    /**
     * Returns the associative array for this CollectionContent
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->completeness) {
            $a["completeness"] = $this->completeness;
        }
        if ($this->count) {
            $a["count"] = $this->count;
        }
        if ($this->resourceType) {
            $a["resourceType"] = $this->resourceType;
        }

        return $a;
    }

    /**
     * Initializes this CollectionContent from an associative array
     *
     * @param array $o
     */
    public function initFromArray(array $o)
    {
        if (isset($o['completeness'])) {
            $this->completeness = $o["completeness"];
            unset($o['completeness']);
        }
        if (isset($o['count'])) {
            $this->count = $o["count"];
            unset($o['count']);
        }
        if (isset($o['resourceType'])) {
            $this->resourceType = $o["resourceType"];
            unset($o['resourceType']);
        }
        parent::initFromArray($o);
    }

    /**
     * Sets a known child element of CollectionContent from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement(\XMLReader $xml)
    {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
            return true;
        } else {
            if (($xml->localName == 'completeness') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                $child = '';
                while ($xml->read() && $xml->hasValue) {
                    $child = $child . $xml->value;
                }
                $this->completeness = $child;
                $happened = true;
            } else {
                if (($xml->localName == 'count') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                    $child = '';
                    while ($xml->read() && $xml->hasValue) {
                        $child = $child . $xml->value;
                    }
                    $this->count = $child;
                    $happened = true;
                } else {
                    if (($xml->localName == 'resourceType') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
                        $child = '';
                        while ($xml->read() && $xml->hasValue) {
                            $child = $child . $xml->value;
                        }
                        $this->resourceType = $child;
                        $happened = true;
                    }
                }
            }
        }

        return $happened;
    }

    /**
     * Sets a known attribute of CollectionContent from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     *
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute(\XMLReader $xml)
    {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes this CollectionContent to an XML writer.
     *
     * @param \XMLWriter $writer            The XML writer.
     * @param bool       $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS('gx', 'collectionContent', null);
        if ($includeNamespaces) {
            $writer->writeAttributeNs('xmlns', 'gx', null, 'http://gedcomx.org/v1/');
        }
        $this->writeXmlContents($writer);
        $writer->endElement();
    }

    /**
     * Writes the contents of this CollectionContent to an XML writer. The startElement is expected to be already
     * provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents(\XMLWriter $writer)
    {
        parent::writeXmlContents($writer);
        if ($this->completeness) {
            $writer->startElementNs('gx', 'completeness', null);
            $writer->text($this->completeness);
            $writer->endElement();
        }
        if ($this->count) {
            $writer->startElementNs('gx', 'count', null);
            $writer->text($this->count);
            $writer->endElement();
        }
        if ($this->resourceType) {
            $writer->startElementNs('gx', 'resourceType', null);
            $writer->text($this->resourceType);
            $writer->endElement();
        }
    }
}
