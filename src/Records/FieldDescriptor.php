<?php
/**
 *
 * 
 *
 * Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
 *
 */

namespace Gedcomx\Records;

/**
 * A description of a field in a record.
 */
class FieldDescriptor extends \Gedcomx\Links\HypermediaEnabledData
{

    /**
     * The original label for the field, as stated on the original record.
     *
     * @var string
     */
    private $originalLabel;

    /**
     * The description of the field.
     *
     * @var \Gedcomx\Common\TextValue[]
     */
    private $description;

    /**
     * Descriptors of the values that are applicable to the field.
     *
     * @var \Gedcomx\Records\FieldValueDescriptor[]
     */
    private $values;

    /**
     * Constructs a FieldDescriptor from a (parsed) JSON hash
     *
     * @param mixed $o Either an array (JSON) or an XMLReader.
     */
    public function __construct($o = null)
    {
        if (is_array($o)) {
            $this->initFromArray($o);
        }
        else if ($o instanceof \XMLReader) {
            $success = true;
            while ($success && $o->nodeType != \XMLReader::ELEMENT) {
                $success = $o->read();
            }
            if ($o->nodeType != \XMLReader::ELEMENT) {
                throw new \Exception("Unable to read XML: no start element found.");
            }

            $this->initFromReader($o);
        }
    }

    /**
     * The original label for the field, as stated on the original record.
     *
     * @return string
     */
    public function getOriginalLabel()
    {
        return $this->originalLabel;
    }

    /**
     * The original label for the field, as stated on the original record.
     *
     * @param string $originalLabel
     */
    public function setOriginalLabel($originalLabel)
    {
        $this->originalLabel = $originalLabel;
    }
    /**
     * The description of the field.
     *
     * @return \Gedcomx\Common\TextValue[]
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * The description of the field.
     *
     * @param \Gedcomx\Common\TextValue[] $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    /**
     * Descriptors of the values that are applicable to the field.
     *
     * @return \Gedcomx\Records\FieldValueDescriptor[]
     */
    public function getValues()
    {
        return $this->values;
    }

    /**
     * Descriptors of the values that are applicable to the field.
     *
     * @param \Gedcomx\Records\FieldValueDescriptor[] $values
     */
    public function setValues($values)
    {
        $this->values = $values;
    }
    /**
     * Returns the associative array for this FieldDescriptor
     *
     * @return array
     */
    public function toArray()
    {
        $a = parent::toArray();
        if ($this->originalLabel) {
            $a["originalLabel"] = $this->originalLabel;
        }
        if ($this->description) {
            $ab = array();
            foreach ($this->description as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['description'] = $ab;
        }
        if ($this->values) {
            $ab = array();
            foreach ($this->values as $i => $x) {
                $ab[$i] = $x->toArray();
            }
            $a['values'] = $ab;
        }
        return $a;
    }


    /**
     * Initializes this FieldDescriptor from an associative array
     *
     * @param array $o
     */
    public function initFromArray($o)
    {
        parent::initFromArray($o);
        if (isset($o['originalLabel'])) {
            $this->originalLabel = $o["originalLabel"];
        }
        $this->description = array();
        if (isset($o['description'])) {
            foreach ($o['description'] as $i => $x) {
                $this->description[$i] = new \Gedcomx\Common\TextValue($x);
            }
        }
        $this->values = array();
        if (isset($o['values'])) {
            foreach ($o['values'] as $i => $x) {
                $this->values[$i] = new \Gedcomx\Records\FieldValueDescriptor($x);
            }
        }
    }

    /**
     * Sets a known child element of FieldDescriptor from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        else if (($xml->localName == 'originalLabel') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = '';
            while ($xml->read() && $xml->hasValue) {
                $child = $child . $xml->value;
            }
            $this->originalLabel = $child;
            $happened = true;
        }
        else if (($xml->localName == 'description') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new \Gedcomx\Common\TextValue($xml);
            if (!isset($this->description)) {
                $this->description = array();
            }
            array_push($this->description, $child);
            $happened = true;
        }
        else if (($xml->localName == 'value') && ($xml->namespaceURI == 'http://gedcomx.org/v1/')) {
            $child = new \Gedcomx\Records\FieldValueDescriptor($xml);
            if (!isset($this->values)) {
                $this->values = array();
            }
            array_push($this->values, $child);
            $happened = true;
        }
        return $happened;
    }

    /**
     * Sets a known attribute of FieldDescriptor from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
        if (parent::setKnownAttribute($xml)) {
            return true;
        }

        return false;
    }

    /**
     * Writes the contents of this FieldDescriptor to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
        parent::writeXmlContents($writer);
        if ($this->originalLabel) {
            $writer->startElementNs('gx', 'originalLabel', null);
            $writer->text($this->originalLabel);
            $writer->endElement();
        }
        if ($this->description) {
            foreach ($this->description as $i => $x) {
                $writer->startElementNs('gx', 'description', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
        if ($this->values) {
            foreach ($this->values as $i => $x) {
                $writer->startElementNs('gx', 'value', null);
                $x->writeXmlContents($writer);
                $writer->endElement();
            }
        }
    }
}
